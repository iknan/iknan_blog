import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,o as e,e as p}from"./app-DprPOB2c.js";const n={},i=p('<h1 id="计算机网络" tabindex="-1"><a class="header-anchor" href="#计算机网络"><span>计算机网络</span></a></h1><h2 id="_1-经典网络分层" tabindex="-1"><a class="header-anchor" href="#_1-经典网络分层"><span>1. 经典网络分层</span></a></h2><p>五层协议模型（TCP/IP模型）：分为物理层、数据链路层、网络层、传输层和应用层。</p><p>七层协议模型（0SI 模型）：分为物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。</p><blockquote><p>TCP和 UDP工作在传输层（第四层），主要是数据的传输和可靠性控制。TCP是一种面向连接的协议，提供可靠的数据传输、流量控制、拥塞控制等功能：UDP是一种无连接的协议，不保证数据传输的可靠性，但传输效率高。</p></blockquote><blockquote><p>HTTP工作在应用层（第七层），还有 HTTPS 和 GRPC。</p></blockquote><h2 id="_2-tcp和udp有什么特点-有什么区别" tabindex="-1"><a class="header-anchor" href="#_2-tcp和udp有什么特点-有什么区别"><span>2. TCP和UDP有什么特点，有什么区别</span></a></h2><p>​ TCP和UDP是两种常见的传输层协议，他们有不同的特点和适用场景。</p><p>​ TCP 的特点是面向连接，可靠，面向字节流。它的适用场景是上传下载，HTTP请求。</p><p>​ UDP的特点是无连接，不可靠，面向报文。它的适用场景是音频/视频传输，实时游戏。</p><hr><p><strong>引申：</strong></p><h3 id="_1-tcp如何做连接管理" tabindex="-1"><a class="header-anchor" href="#_1-tcp如何做连接管理"><span>1 .TCP如何做连接管理？</span></a></h3><p>通过三次握手建立连接，通过四次挥手关闭连接。</p><h2 id="_2-tcp是如何保证可靠的" tabindex="-1"><a class="header-anchor" href="#_2-tcp是如何保证可靠的"><span>2 . TCP是如何保证可靠的？</span></a></h2><p>TCP 是通过序列号、确认应答、重传机制、流量控制以及滑动窗口等机制实现可靠性传输的。</p><p>​ TCP通过一系列机制来确保数据的可靠传输。</p><p>​ 首先，它使用<strong>序号和确认机制</strong>来确保数据的有序传输和完整性。每个TCP报文段都包含一个序号字段，表示该报文段的数据在数据流中的位置，接收方通过发送确认消息来确认已经收到的数据，并且告知期望接收的下一个数据的序号。这样，发送方就可以根据收到的确认消息，判断数据是否成功传输，如果没有收到确认消息，就会重新发送数据，确保数据的可靠传输。</p><p>​ 其次，TCP还使用<strong>超时和重传机制</strong>来处理丢失的数据包。如果发送方在超时时间内未收到确认消息，它会假设数据丢失，并重新发送相应的数据。这样可以确保即使在网络出现丢包的情况下，数据仍然可以可靠地传输。</p><p>​ 此外，TCP还使用<strong>流控制</strong>和<strong>拥塞控制</strong>机制来确保网络的稳定性和公平性。流控制机制通过接收方的窗口字段来控制数据的发送速率，防止发送方发送过多的数据导致接收方无法处理。而拥塞控制机制则根据网络的拥塞情况动态调整发送速率，以避免过多的数据包在网络中造成拥塞，确保网络中的所有流量可以得到公平的分享。</p><h3 id="_3-重传机制有哪些" tabindex="-1"><a class="header-anchor" href="#_3-重传机制有哪些"><span>3 .重传机制有哪些？</span></a></h3><ul><li>超时重传</li><li>快速重传</li><li>SACK</li><li>D-SACK</li></ul><h3 id="_4-什么是快速重传" tabindex="-1"><a class="header-anchor" href="#_4-什么是快速重传"><span>4 .什么是快速重传？</span></a></h3><p>​ 快速重传的工作方式是当收到三个相同的 ACK 报文时，会在定时器过期之前，重传丢失的报文段。</p><p>​ 它的优点是相比于超时重传节省了大量时间 但是它和超时重传都没有解决重传的时候，是重传一个，还是重传所有的问题。</p><h3 id="_5-怎么保证包有序" tabindex="-1"><a class="header-anchor" href="#_5-怎么保证包有序"><span>5 .怎么保证包有序？</span></a></h3><p>发送端发送数据时会给每个TCP段分配一个序列号，用于标识该段在整个数据流中的位置。</p><p>接收端收到数据段时，可以通过序列号对这些数据段重新排序。</p><h3 id="_6-如何实现一个可靠的udp连接" tabindex="-1"><a class="header-anchor" href="#_6-如何实现一个可靠的udp连接"><span>6 .如何实现一个可靠的UDP连接？</span></a></h3><h2 id="_3-三次握手和四次挥手" tabindex="-1"><a class="header-anchor" href="#_3-三次握手和四次挥手"><span>3.三次握手和四次挥手</span></a></h2><h3 id="_1-三次握手的过程" tabindex="-1"><a class="header-anchor" href="#_1-三次握手的过程"><span>1.三次握手的过程：</span></a></h3><p>​ 第一步，首先客户端会初始化一个随机序列号，然后存到SYN中发送给服务端。</p><p>​ 第二步，服务端收到这个SYN包后，也会初始化一个随机序列号，并把SYN和ACK报文发送给客户端，ACK报文存的是接收到的（客户端序+1）</p><p>​ 第三步，客户端收到服务端返回的SYN和ACK包后，会把服务端发送的序列号+1存到ACK报文中，发送给服务端一个ACK报文，确认服务器的请求建立连接。</p><h3 id="_2-为什么是三次握手-不是两次、四次" tabindex="-1"><a class="header-anchor" href="#_2-为什么是三次握手-不是两次、四次"><span>2.为什么是三次握手？不是两次、四次？</span></a></h3><p>因为</p><ul><li><p>三次握手才可以 阻止重复历史连接的初始化（主要原因）</p></li><li><p>三次握手才可以 同步双方的初始序列号</p></li><li><p>三次握手才可以 避免资源浪费</p><p>两次握手不能确认双方的可靠连接。</p><p>四次握手会造成资源的浪费。</p></li></ul><h3 id="_3-四次挥手的过程" tabindex="-1"><a class="header-anchor" href="#_3-四次挥手的过程"><span>3.四次挥手的过程</span></a></h3><ul><li><p>客户端打算关闭连接，此时会发送FIN报文，，之后客户端进入 <code>FIN_WAIT_1</code> 状态。</p></li><li><p>服务端收到该报文后，就向客户端发送 <code>ACK</code> 应答报文，接着服务端进入 <code>CLOSE_WAIT</code> 状态。</p></li><li><p>客户端收到服务端的 <code>ACK</code> 应答报文后，之后进入 <code>FIN_WAIT_2</code> 状态。</p></li><li><p>等待服务端处理完数据后，也向客户端发送 <code>FIN</code> 报文，之后服务端进入 <code>LAST_ACK</code> 状态。</p></li><li><p>客户端收到服务端的 <code>FIN</code> 报文后，回一个 <code>ACK</code> 应答报文，之后进入 <code>TIME_WAIT</code> 状态</p><p>并在等待一段时间（通常是2倍的最大报文段寿命时间，2MSL）后才会关闭连接，释放资源。这段时间是为了确保最后一个ACK报文段能被对方收到，防止“迟到的报文段”干扰新的连接。</p><p>接收方在收到ACK报文段后立即进入CLOSED状态，完成连接关闭。</p></li></ul><p>你可以看到，每个方向都需要<strong>一个 FIN 和一个 ACK</strong>，因此通常被称为<strong>四次挥手</strong>。</p><p>这里一点需要注意是：<strong>主动关闭连接的，才有 TIME_WAIT 状态。</strong></p><h2 id="_4-滑动窗口-流量控制和拥塞控制" tabindex="-1"><a class="header-anchor" href="#_4-滑动窗口-流量控制和拥塞控制"><span>4. 滑动窗口，流量控制和拥塞控制</span></a></h2><h3 id="_1-滑动窗口" tabindex="-1"><a class="header-anchor" href="#_1-滑动窗口"><span>1.滑动窗口</span></a></h3><p>​ 滑动窗口是通过动态调整窗口大小来高效的数据传输。</p><p>发送方可以在发送窗口内连续发送数据包，而无需等待每个数据包的确认。发送窗口的大小限制了未被确认的数据量。</p><p>接收方按序接收数据包，并对每个数据包发送ACK报文。接收方的窗口大小通过ACK报文中的窗口大小字段告知发送方。</p><p>发送方收到ACK报文后，会将发送窗口向前滑动。滑动的距离取决于收到的确认字节数。新的数据可以填补窗口腾出的空间。</p><h3 id="_2-拥塞控制" tabindex="-1"><a class="header-anchor" href="#_2-拥塞控制"><span>2.拥塞控制</span></a></h3><p><strong>cwnd：滑动窗口大小</strong> <strong><code>ssthresh</code> ：慢启动门限</strong></p><ul><li><p>慢启动</p><p>​ <strong>当发送方每收到一个 ACK，拥塞窗口 cwnd 的大小就会加 1。指数性的增长。</strong></p></li><li><p>拥塞避免</p><p>​ 当拥塞窗口 <code>cwnd</code> 「超过」慢启动门限 <code>ssthresh</code> 就会进入拥塞避免算法。</p><p>​ <strong>每当收到一个 ACK 时，cwnd 增加 1/cwnd。线性增长</strong></p></li><li><p>拥塞发生</p><p>​ <strong>当发生了「超时重传」，则就会使用拥塞发生算法。</strong></p><p><strong>这个时候，ssthresh 和 cwnd 的值会发生变化：</strong></p><ul><li><strong><code>ssthresh</code> 设为 <code>cwnd/2</code>，</strong></li><li><strong><code>cwnd</code> 重置为 <code>1</code> （是恢复为 cwnd 初始化值，我这里假定 cwnd 初始化值 1）</strong></li></ul></li><li><p>快速恢复</p></li></ul><h3 id="_3-tcp粘包怎么处理" tabindex="-1"><a class="header-anchor" href="#_3-tcp粘包怎么处理"><span>3.TCP粘包怎么处理</span></a></h3><ol><li><strong>定长消息</strong>：将消息按照固定长度进行分割，确保每个消息的长度是固定的。</li><li><strong>固定长度头部</strong>：在消息前添加固定长度的头部，头部包含消息的长度信息，接收方先读取头部再读取数据。</li><li><strong>使用特定字符分隔</strong>：在消息之间添加特定的分隔符，接收方根据分隔符将数据进行分割。</li></ol><h2 id="_5-https和http" tabindex="-1"><a class="header-anchor" href="#_5-https和http"><span>5.HTTPS和HTTP</span></a></h2><h3 id="_1-https和http的区别" tabindex="-1"><a class="header-anchor" href="#_1-https和http的区别"><span>1.HTTPS和HTTP的区别</span></a></h3><p>HTTP和HTTPS都是用于在网络上传输数据的协议</p><p>HTTPS相比于HTTP多了一个SSL证书</p><p>HTTPS使用的是SSL/TSL加密通讯，而HTTP是明文传输，安全性很低</p><p>HTTPS监听443端口，HTTP监听80端口</p><p>HTTPS因为需要进行加密解密等过程，速度上会略慢与HTTP</p><h3 id="_2-什么是ssl协议" tabindex="-1"><a class="header-anchor" href="#_2-什么是ssl协议"><span>2.什么是SSL协议</span></a></h3><p>SSL（Secure Sockets Layer）协议是一种安全技术，通过加密和身份验证机制，确保了客户端和服务器之间的数据传输的安全性</p><h3 id="_3-https是如何优化三次握手-四次挥手" tabindex="-1"><a class="header-anchor" href="#_3-https是如何优化三次握手-四次挥手"><span>3.HTTPS是如何优化三次握手，四次挥手</span></a></h3><p><strong>TCP快速打开</strong></p><ol><li>客户端发送SYN包，同时携带预先交换的cookie和数据。</li><li>服务器验证cookie后，发送SYN-ACK包，并立即响应数据。</li></ol><p><strong>TLS早期数据</strong></p><ol><li>客户端发送包含会话票据和早期数据的ClientHello消息。</li><li>服务器验证会话票据后，发送ServerHello消息，并立即处理早期数据。</li></ol><p><strong>会话恢复机制</strong></p><ol><li><strong>会话ID</strong>： <ul><li>客户端发送包含会话ID的ClientHello消息。</li><li>服务器检查并确认会话ID，发送ServerHello消息，恢复会话。</li></ul></li><li><strong>会话票据</strong>： <ul><li>客户端发送包含会话票据的ClientHello消息。</li><li>服务器解密会话票据，恢复会话并发送ServerHello消息。</li></ul></li></ol><p>​ <strong>通过这些优化，HTTPS在保持高安全性的同时显著提升了连接建立和数据传输的效率，减少了延迟，提高了用户体验。</strong></p><h3 id="_4-http-1-1-http-2-http-3" tabindex="-1"><a class="header-anchor" href="#_4-http-1-1-http-2-http-3"><span>4.http/1.1，http/2,http/3</span></a></h3><p><strong>HTTP/1.1</strong></p><ul><li><p>特点</p><p>：</p><ul><li>基于文本的协议，每个请求/响应都是纯文本形式，使用明文传输。</li><li>每个连接只能处理一个请求，因此需要多个连接来并行加载资源（例如，图像、CSS、JavaScript）。</li><li>多个请求需要按顺序排队，因为每个请求都必须等待前一个请求完成。</li><li>存在“队头阻塞”问题，即一个连接上的某个请求阻塞了后续请求的执行。</li></ul></li></ul><p><strong>HTTP/2</strong></p><ul><li><p>特点</p><p>：</p><ul><li>引入了二进制分帧层，将HTTP消息分解为一系列帧，每个帧可以独立地传输和处理。</li><li>支持多路复用，允许在单个连接上并发发送多个请求和响应，消除了多个连接带来的开销。</li><li>引入了头部压缩机制，减少了重复的HTTP头部信息，降低了通信数据量。</li><li>支持服务器推送（Server Push），允许服务器在客户端请求之前主动推送资源。</li></ul></li></ul><p><strong>HTTP/3</strong></p><ul><li><p>特点</p><p>：</p><ul><li>基于 UDP 协议，通过 QUIC（Quick UDP Internet Connections）协议进行传输。</li><li>QUIC 协议实现了更快的连接建立和更可靠的数据传输，避免了 TCP 的队头阻塞问题。</li><li>支持零RTT连接建立，允许在初始握手阶段就发送数据。</li><li>可靠性更高，当网络切换（如移动到另一个网络）时，连接不会被重置，减少了用户感知到的中断时间。</li></ul></li></ul><p><strong>性能对比</strong></p><ul><li>HTTP/2相对于HTTP/1.1： <ul><li>提高了页面加载速度，尤其是在高延迟网络环境下。</li><li>减少了网络连接和资源请求的数量，降低了延迟。</li><li>支持服务器推送，优化了资源加载顺序。</li></ul></li><li>HTTP/3相对于HTTP/2： <ul><li>进一步降低了延迟，提高了连接建立速度。</li><li>提供了更好的移动设备支持，减少了网络切换对连接的影响。</li></ul></li></ul><h3 id="get与post的区别" tabindex="-1"><a class="header-anchor" href="#get与post的区别"><span>Get与Post的区别</span></a></h3><p>GET 和 POST 是 HTTP 协议中最常用的两种请求方法，它们在数据传输和使用方式上有几个重要的区别：</p><p><strong>1. 数据传输方式</strong></p><ul><li><strong>GET</strong>：通过 URL 参数传输数据，数据附在 URL 后面，可见。有一定安全风险，特别是对于敏感信息。</li><li><strong>POST</strong>：通过请求体传输数据，数据不可见。对安全，适合传输敏感信息</li></ul><p><strong>2. 数据长度限制</strong></p><ul><li><strong>GET</strong>：由于 URL 长度限制，GET 请求传输的数据量较小，一般不超过 2KB。</li><li><strong>POST</strong>：没有固定的数据长度限制，可以传输大量数据.</li></ul><p><strong>3. 数据类型</strong></p><ul><li><strong>GET</strong>：通常用于获取资源，不应该对服务器状态产生任何影响，因此用于幂等操作。</li><li><strong>POST</strong>：通常用于向服务器提交数据，可能会对服务器状态产生影响，用于非幂等操作，例如提交表单。</li></ul><p><strong>4. 使用场景</strong></p><ul><li><strong>GET</strong>：适合用于获取数据，例如浏览网页、搜索等。</li><li><strong>POST</strong>：适合用于提交数据，例如提交表单、上传文件等。</li></ul><p><strong>总结</strong></p><ul><li><strong>GET</strong>：适用于获取数据，数据附在 URL 上，传输数据量小，安全性相对较低，幂等操作。</li><li><strong>POST</strong>：适用于提交数据，数据传输在请求体中，传输数据量大，安全性较高，非幂等操作。</li></ul>',90),s=[i];function o(r,a){return e(),l("div",null,s)}const d=t(n,[["render",o],["__file","计算机网络.html.vue"]]),T=JSON.parse('{"path":"/posts/banana/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.html","title":"计算机网络","lang":"en-US","frontmatter":{"description":"计算机网络 1. 经典网络分层 五层协议模型（TCP/IP模型）：分为物理层、数据链路层、网络层、传输层和应用层。 七层协议模型（0SI 模型）：分为物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。 TCP和 UDP工作在传输层（第四层），主要是数据的传输和可靠性控制。TCP是一种面向连接的协议，提供可靠的数据传输、流量控制、拥塞控制等功能...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/banana/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.html"}],["meta",{"property":"og:site_name","content":"Blog Demo"}],["meta",{"property":"og:title","content":"计算机网络"}],["meta",{"property":"og:description","content":"计算机网络 1. 经典网络分层 五层协议模型（TCP/IP模型）：分为物理层、数据链路层、网络层、传输层和应用层。 七层协议模型（0SI 模型）：分为物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。 TCP和 UDP工作在传输层（第四层），主要是数据的传输和可靠性控制。TCP是一种面向连接的协议，提供可靠的数据传输、流量控制、拥塞控制等功能..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-05-29T11:09:48.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2024-05-29T11:09:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"计算机网络\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-29T11:09:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"1. 经典网络分层","slug":"_1-经典网络分层","link":"#_1-经典网络分层","children":[]},{"level":2,"title":"2. TCP和UDP有什么特点，有什么区别","slug":"_2-tcp和udp有什么特点-有什么区别","link":"#_2-tcp和udp有什么特点-有什么区别","children":[{"level":3,"title":"1 .TCP如何做连接管理？","slug":"_1-tcp如何做连接管理","link":"#_1-tcp如何做连接管理","children":[]}]},{"level":2,"title":"2 . TCP是如何保证可靠的？","slug":"_2-tcp是如何保证可靠的","link":"#_2-tcp是如何保证可靠的","children":[{"level":3,"title":"3 .重传机制有哪些？","slug":"_3-重传机制有哪些","link":"#_3-重传机制有哪些","children":[]},{"level":3,"title":"4 .什么是快速重传？","slug":"_4-什么是快速重传","link":"#_4-什么是快速重传","children":[]},{"level":3,"title":"5 .怎么保证包有序？","slug":"_5-怎么保证包有序","link":"#_5-怎么保证包有序","children":[]},{"level":3,"title":"6 .如何实现一个可靠的UDP连接？","slug":"_6-如何实现一个可靠的udp连接","link":"#_6-如何实现一个可靠的udp连接","children":[]}]},{"level":2,"title":"3.三次握手和四次挥手","slug":"_3-三次握手和四次挥手","link":"#_3-三次握手和四次挥手","children":[{"level":3,"title":"1.三次握手的过程：","slug":"_1-三次握手的过程","link":"#_1-三次握手的过程","children":[]},{"level":3,"title":"2.为什么是三次握手？不是两次、四次？","slug":"_2-为什么是三次握手-不是两次、四次","link":"#_2-为什么是三次握手-不是两次、四次","children":[]},{"level":3,"title":"3.四次挥手的过程","slug":"_3-四次挥手的过程","link":"#_3-四次挥手的过程","children":[]}]},{"level":2,"title":"4. 滑动窗口，流量控制和拥塞控制","slug":"_4-滑动窗口-流量控制和拥塞控制","link":"#_4-滑动窗口-流量控制和拥塞控制","children":[{"level":3,"title":"1.滑动窗口","slug":"_1-滑动窗口","link":"#_1-滑动窗口","children":[]},{"level":3,"title":"2.拥塞控制","slug":"_2-拥塞控制","link":"#_2-拥塞控制","children":[]},{"level":3,"title":"3.TCP粘包怎么处理","slug":"_3-tcp粘包怎么处理","link":"#_3-tcp粘包怎么处理","children":[]}]},{"level":2,"title":"5.HTTPS和HTTP","slug":"_5-https和http","link":"#_5-https和http","children":[{"level":3,"title":"1.HTTPS和HTTP的区别","slug":"_1-https和http的区别","link":"#_1-https和http的区别","children":[]},{"level":3,"title":"2.什么是SSL协议","slug":"_2-什么是ssl协议","link":"#_2-什么是ssl协议","children":[]},{"level":3,"title":"3.HTTPS是如何优化三次握手，四次挥手","slug":"_3-https是如何优化三次握手-四次挥手","link":"#_3-https是如何优化三次握手-四次挥手","children":[]},{"level":3,"title":"4.http/1.1，http/2,http/3","slug":"_4-http-1-1-http-2-http-3","link":"#_4-http-1-1-http-2-http-3","children":[]},{"level":3,"title":"Get与Post的区别","slug":"get与post的区别","link":"#get与post的区别","children":[]}]}],"git":{"createdTime":1716980988000,"updatedTime":1716980988000,"contributors":[{"name":"iknan","email":"149158995+iknan@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":10.66,"words":3198},"filePathRelative":"posts/banana/计算机网络.md","localizedDate":"May 29, 2024","excerpt":"\\n<h2>1. 经典网络分层</h2>\\n<p>五层协议模型（TCP/IP模型）：分为物理层、数据链路层、网络层、传输层和应用层。</p>\\n<p>七层协议模型（0SI 模型）：分为物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。</p>\\n<blockquote>\\n<p>TCP和 UDP工作在传输层（第四层），主要是数据的传输和可靠性控制。TCP是一种面向连接的协议，提供可靠的数据传输、流量控制、拥塞控制等功能：UDP是一种无连接的协议，不保证数据传输的可靠性，但传输效率高。</p>\\n</blockquote>\\n<blockquote>\\n<p>HTTP工作在应用层（第七层），还有 HTTPS 和 GRPC。</p>\\n</blockquote>","autoDesc":true}');export{d as comp,T as data};
