"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[5728],{2991:(l,e)=>{e.A=(l,e)=>{const i=l.__vccOpts||l;for(const[l,t]of e)i[l]=t;return i}},7187:(l,e,i)=>{i.r(e),i.d(e,{comp:()=>s,data:()=>p});var t=i(2360);const a=(0,t.Lk)("h1",{id:"on-your-mark",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#on-your-mark"},[(0,t.Lk)("span",null,"ON YOUR MARK")])],-1),n=(0,t.Lk)("blockquote",null,[(0,t.Lk)("p",null,"如何高效学习")],-1),r=(0,t.Fv)('<p><a name="SCKWF"></a></p><h2 id="学习的本质是坚持" tabindex="-1"><a class="header-anchor" href="#学习的本质是坚持"><span>学习的本质是坚持</span></a></h2><p><a name="UvmIx"></a></p><h3 id="永不退休的宫崎骏" tabindex="-1"><a class="header-anchor" href="#永不退休的宫崎骏"><span>永不退休的宫崎骏</span></a></h3><figure><img src="/self-cultivation/7.png" alt="800.jpg" tabindex="0" loading="lazy"><figcaption>800.jpg</figcaption></figure><blockquote><p>比肩“动漫之神”手冢治虫的男人。</p></blockquote><p><a href="https://www.bilibili.com/bangumi/play/ss33610?spm_id_from=333.337.0.0" target="_blank" rel="noopener noreferrer">宫崎骏：十年一梦</a> 生于1941年的1月5日，今年已经82岁了。他大学毕业后踏入动画制作工作，日后成为日本知名动画厂 <strong>吉卜力</strong> 的核心人物之一。其执导过11部长篇动画电影，多次宣布退休，2013年9月时是第7次宣布退休 ，2016年再度复出。现在，2022年，他又付出了。我们看下他的一些经典作品：</p><ul><li>1986年：天空之城</li><li>1988年：龙猫</li><li>1989年：魔女宅急便</li><li>1992年：红猪</li><li>1997年：幽灵公主</li><li>2001年：千与千寻</li><li>2004年：哈尔移动城堡</li><li>2008年：悬崖上的金鱼公主</li><li>2013年：起风了</li><li>2024年：你想活出怎样的人生</li></ul><p>宫崎骏因为其左翼政治立场的问题，经常受到日本右派的攻击。曾经明确的表示过，绝对不会为东京奥运会服务。什么都不会。实际上，日本大多数艺术家都是左翼人士，跟现在的日本相当不对付。</p><p>但我们要说的不是这些。 <a name="MEYnN"></a></p><h3 id="都是笨蛋" tabindex="-1"><a class="header-anchor" href="#都是笨蛋"><span>都是笨蛋</span></a></h3><figure><img src="/self-cultivation/8.png" alt="screenshot-20230306-102449.png" tabindex="0" loading="lazy"><figcaption>screenshot-20230306-102449.png</figcaption></figure><p>“在我看来，你们通通没有才能，一个个都是笨蛋，才能这种东西是需要靠自己挖掘创造的。我也不是什么天才，只是比谁都拼命工作，一步一个脚印走过来而已。最后回过头一看，背后一个人也没有，那帮懒惰的人在山脚下念叨着，山顶那个人真是天才。”</p><p>“开什么玩笑！”</p><p>“那些比我更有时间，精力，感性的人，为什么比我懒惰。既然你们都要浪费掉，为什么不给我？我还有好多东西想做呢。”</p><p><a href="https://www.bilibili.com/video/BV13N411Z7iP/?p=11&amp;vd_source=b9512ca96b15747a3e3e2f4d0d3432b6" target="_blank" rel="noopener noreferrer">Legal High P11_哔哩哔哩_bilibili</a></p><hr><p>宫崎骏一生都在努力做动画，心思都放在工作上，忽视了家庭和孩子。导致他和两个儿子之间的关系很差。他的长子宫崎吾朗曾经说过： :::success <strong>他是一个一百分的导演，但却是一个零分的父亲。</strong> ::: <a name="THPbT"></a></p><h2 id="首先是态度问题" tabindex="-1"><a class="header-anchor" href="#首先是态度问题"><span>首先是态度问题</span></a></h2><p>我们人类在物理上是一个非常有趣的，吃甜食会开心，吃辣会很爽，唱歌跳舞谈恋爱会使心情愉悦。对于大多数人而言，有两件事情是<strong>逆人性的，是非常痛苦</strong>的。一个是<strong>锻炼</strong>，一个是<strong>学习</strong>。学习是一项长期的，痛苦的过程。人人平等，学霸也痛苦。</p><p>学习没有速成，只有<strong>态度+方法+时间</strong>。如果你总是想着速成，45天前端入门，30天掌握Go语言，那最好还是不要学了。</p><p>就像我们前面说的，职业素养从主观上决定你能在这一行干多久，学习态度决定着你是否能坚持下去。 <a name="DuTeg"></a></p><h3 id="给自己一个目标" tabindex="-1"><a class="header-anchor" href="#给自己一个目标"><span>给自己一个目标</span></a></h3><p>我们要先给自己确定一个目标，周总理的<strong>为中华之崛起而读书</strong>，大多数人没有这样高的思想觉悟，所以我们做一个实在点的，简单点的：</p><figure><img src="/self-cultivation/9.png" alt="tt" tabindex="0" loading="lazy"><figcaption>tt</figcaption></figure><blockquote><p>先给自己一个小目标，挣他一个亿。方案的话，我可以养鸡养鸭，具体思路，你多长时间要做到什么规模，怎么做。</p></blockquote><p>我们不妨把目标再小一点： 短期目标：找到一份1W+的工作，长期目标：长期目标：3-5年时，年薪50W+ 大致方案：</p><ol><li>先满足找工作的基本要求，即：初级工程师的基本要求。</li><li>持续学习，满足高级工程师的基本要求。</li></ol><p>具体思路：</p><ol><li>学习编程语言和常用框架。</li><li>学习基础知识体系。</li><li>了解面试中常见的方案和套路。</li></ol><p>如果我们没有明确的目标会怎么样？想想你们在大学的头几年，每天早上间歇性早起，持续性赖床；高高兴兴出去玩，上课如上坟；平常不念书，临考挂柯南。大多数人都这样，这是刻在人类DNA里的事情。最重要的问题是：我们总觉得自己很努力很爱学习，其实都是自己骗自己。<strong>千万不要自己骗自己。</strong></p><p>很多人都认为自己爱学习，会学习，但是：</p><ol><li>只想不做，缺乏行动。</li><li>没有目标，没有方向，没有标准。</li><li>不会自学，缺少技能和方法。</li><li>缺少实践，从不坚持。</li></ol><p>毛主席长征到了延安后才开始读的克劳塞维茨的《战争论》，一直保持着良好的读书习惯。特朗普虽然不太靠谱，但是他相当自律。他对孩子们反复要求过：<strong>远离毒品，少喝点酒，不要抽烟</strong>，并且能够以身作则。如果你看过很多人的自传，你就会发现，成功人士普遍目标明确，非常自律。 <a name="bEazs"></a></p><h2 id="主动与被动" tabindex="-1"><a class="header-anchor" href="#主动与被动"><span>主动与被动</span></a></h2><p>:::success 主动和被动，即是态度也是方法。 :::</p><blockquote><p>1946 年，美国学者埃德加·戴尔（Edgar Dale）提出了「学习金字塔」（Cone of Learning）的理论。之后，美国缅因州国家训练实验室也做了相同的实验，并发布了「学习金字塔」报告。</p></blockquote><figure><img src="/self-cultivation/10.png" alt="ss" tabindex="0" loading="lazy"><figcaption>ss</figcaption></figure><ul><li>被动学习：如听讲、阅读、视听、演示，学习内容的平均留存率为 5%、10%、20% 和 30%。</li><li>主动学习：如通过讨论、实践、教授给他人，会将原来被动学习的内容留存率从 5% 提升到 50%、75% 和 90%。</li></ul><p>这个模型很好地展示了不同学习深度和层次之间的对比。</p><p>你可以记住一个结论，这个结论在今后绝大多数的<strong>技术学习</strong>中都非常有效果： :::success</p><ol><li>凡是别人给你讲的，给你演示的都不能有效提高你的技术能力和学习能力。</li><li>只有你主动开始<strong>思考，实践，总结</strong>并尝试向他人<strong>讲解</strong>时，才提高你的技术能力和学习能力。</li></ol><p>:::</p><p><strong>努力读书，考一个更高的分数。<strong>这是你们学生时代被反复灌输的观点。在学校里，它是对的，是有效的。在职场中，在生活中，它没有任何用处。读很多的书，做很多的练习题，考很高的分数不一定能帮你提高解决实际问题的能力，这是一种蛮劲儿。也不要去盲目追求读书的速度和数量，这是虚假的勤奋和目标。学习一门</strong>技术</strong>的本质是<strong>思辨和实践，归纳和总结</strong>，是结合自己的情况制定适合自己的方案。</p><p>学习本身在学校和职场后的本质是不变的，他们只是在不同环境下有不同的使用方法。归根结底，学习是为了：</p><ol><li>了解世界。开拓眼界，这个世界上的事儿，究竟是怎么一回事，有哪些方法，又有哪些原理。</li><li>了解自己。对自己有一个清醒的全面的认识，有一个客观的，准确的判断。</li><li>改变自己。让自己活的更好一点，更舒服一点，更自由一点。</li></ol><p>总而言之，学习是一个螺旋上升的过程，你知道越多，你不知道的越多，你不知道的越多，你就会尝试去了解更多。路漫漫其修远兮，吴将上下而求索。（需要画个图来演示） <a href="https://www.bilibili.com/video/BV1wG4y147vo/?spm_id_from=333.337.search-card.all.click" target="_blank" rel="noopener noreferrer">历史必须知道的规律：历史总是曲折式前进，螺旋式上升_哔哩哔哩_bilibili</a><a name="Dr2QH"></a></p><h3 id="面对枯燥" tabindex="-1"><a class="header-anchor" href="#面对枯燥"><span>面对枯燥</span></a></h3><p>计算机底层的知识是<strong>非常抽象，非常无聊，非常枯燥</strong>的东西，不要说看了，只要听老师在台上讲都能睡得很安详。 如果你发现一些知识点出现上面这种情况，不要慌：</p><ol><li>这个知识点超出你目前的知识范围了，你肯定还没遇到过用到它的场景。</li><li>要么找一个场景，自己实践一下，有实操经验再去学理论知识。</li><li>要么找个大佬，捞你一下，直接给你讲清楚。</li><li>带着问题，反复学习。</li></ol><p>这也是我反复和大家强调过的： :::success <strong>我对于所有技术框架，项目实训，都是要求你们先自学，自己摸索，然后再给你们讲原理，抠细节，划重点。这样一开始会很慢，但长远来看，对你们而言效果是最好的。</strong> :::</p><p>对于初学者而言，知识不仅枯燥还非常的多。这个多主要体现在两个方面：</p><ol><li>需要学习的知识点非常多。</li><li>知识点之间的关系很复杂。</li></ol><p>对于这种情况，也不要慌张，我们的策略是:<strong>小步快跑</strong>。</p><p>首先，知识是学不完的，肯定学不完的。优先学那些原理，理论等不容易发生变化的。学会一个知识点，就多一个能力。一定不要过多的花时间学哪些表面的，比如语法、花里胡哨的实现方式之类。用<strong>投资的思想</strong>来确定需要学习的东西。<strong>优先学习那些能带来长期稳定的知识和能力</strong></p><p>其次，明确学习边界。学会每一个知识点之后，它延伸出来的，或者与之相关的其他知识点都可以了解一下，确定一下这块知识的位置和场景，为后续学习做准备。不要再某一个细枝末节上过度深究。<strong>先扩展广度，后增加深度</strong>。</p><p>最后，有明确的学习过程和记录。学习需要有一个尺度，否则很难看出来到底成长了多少。把字节学习的思考，写得代码，实现的过程都记录一下，半年到一年之后你会发现自己不知不觉间，已经走了好远好远。以后就再也不会觉得知识多了。 <a name="Uwx8d"></a></p><h2 id="学习的方法" tabindex="-1"><a class="header-anchor" href="#学习的方法"><span>学习的方法</span></a></h2><p>根据具体的目的不同，学习的方法也不同。针对我们程序员来说，推荐一个比较简单，实用的方法。 <a name="adUIA"></a></p><h3 id="收集与鉴别信息" tabindex="-1"><a class="header-anchor" href="#收集与鉴别信息"><span>收集与鉴别信息</span></a></h3><p>目前这个社会是自媒体泛滥的社会，人人都可以发表意见，人人都能传播知识，但是有价值的，有营养的非常少。 你们是不是也感觉到信息源非常多，意见非常乱，水平参差不齐。</p><p>我阅读中最讨厌的三件事：</p><ol><li>标题党。取一个博人眼球的题目，内容灌水，骗点击。</li><li>说废话，车轱辘话。</li><li>剽窃他人作品，还不标明来源。</li></ol><p>这也是目前各大信息平台的现状。所以，我对学生的要求：<strong>少看点短视频，少刷微博，少逛小红书和B站</strong>。少关注那些水平一般就敢对整个行业点评批评的人。</p><p>我们在学习过程中，完全不要看零碎的知识点，少看那种水平一般就到处搬运的Up主。多看一些优质渠道，优质UP的内容。如何鉴别优质内容：</p><ol><li>能进入教科书的知识。教科书需要的知识点都是经过行业专家不断筛选和总结过的内容。</li><li>官方文档。任何语言，组件，工具的官方文档都是经过严谨的推敲和论证后放出来的。大部分是英语，不过语法和单词比较简单，借助翻译工具很容易理解。</li><li>经过实践的，论证，有数据支持的知识或者方案。最好是有业界大拿或者大公司生产系统多次迭代后的内容。一定不能是道听途说，或者野路子之类的内容。</li><li>一定是有作者自己的思考和实践后的东西，而不是照搬照抄，套模板，废话连篇的东西。</li></ol><p>优质的渠道：</p><ol><li>各大官方博客。</li><li>各大厂商的技术博客或者公众号。阿里技术，腾讯技术等，B站也有，但是质量一般。</li><li>业界大佬喜欢去的技术论坛或者社区。infoQ，极客时间，推特或者微博（大佬其实一般不喜欢在这些社交平台抛头露面）</li><li>业界自发组成的民间社区。GO夜读，技术集会。</li><li>大佬自己维护的博客。阮一峰，廖雪峰，面向信仰编程等等。</li></ol><p>优质的UP主：<strong>有丰富的一线开发经验</strong>。</p><p>还有一些技术发展，职业规范，架构设计，职场经历类的信息，往往是非常难找到的，尤其是业界大拿的经历。<strong>钱不给到位，有些知识和方案，是绝对不会讲的</strong>。 <a name="EsvBY"></a></p><h3 id="知识地图" tabindex="-1"><a class="header-anchor" href="#知识地图"><span>知识地图</span></a></h3><blockquote><p>构建属于自己的知识地图。</p></blockquote><p>一开始最好先不要去看大佬，或者高质量的文章系统，容易变成看天书。我们需要先搭建好自己的知识地图，这一阶段你最好去看那些入门级的UP主的文章和视频。学习技术不像在学校里读书，更像是考驾照： :::success <strong>观察</strong> ➡️ <strong>模仿</strong>➡️ <strong>学习理论 <strong>➡️ <strong>总结提高</strong> ➡️</strong>输出给其他人</strong> :::</p><p>就像我们上面讲的，学习分为主动和被动学习。一般情况下，我们都是被动开始学习的。这一阶段，我们主要目标是观察他是如何让代码跑起来的，具体都做了什么内容，哪些是关键节点。这一步其实没必要展开，此时我们的目的很简单，就是<strong>先看会，脑袋里形成整体框架，知道对应的知识点散落在那一块</strong>。</p><p>然后我们开始模仿。模仿其实就是实践的一部分，光看是看不会的，上手试过一两次，就知道哪些地方是难点，哪些地方自己其实没关注到。这时候就可以回过头来，把之前的视频再捋一遍。</p><p>学习理论，是对实践的补充。此时，你已经学会“怎么用了”，需要补齐“为什么这样用”。在围绕为什么这么用的基础上，需要知道哪些问题面试必考题，哪些是高频题，哪些是拔高题，哪些一般是不会考的题。</p><p>总结提高，这是最重要的一步。如果前面的步骤是吧知识地图的架子打起来了，这一步就是稳固，拧紧螺丝，并开始尝试把他链接到已有地图的某一块上。具体而言，就是把之前实践中不懂的地方搞懂，并且知道这一块知识点的<strong>用法和考察方法</strong>。用法可以提高你的技术水平，考察方法可以帮你顺利通过技术面试。</p><p>至此，知识地图的架子就搭起来了，后续的学习只需要顺藤摸瓜就可以进行了。以后就算没有人指引了，你也可以很清楚知道自己的知识体系目前是个什么情况，哪些地方掌握的还不错，哪些地方有短板。分享一下 作为初级工程师应该具有的知识地图： <img src="/self-cultivation/11.png" alt="image.png" loading="lazy"> 有快7000字，大家可以看下面的原图。 <a href="https://www.processon.com/mindmap/64a555b2e79b6b5e77ad9ce3" target="_blank" rel="noopener noreferrer">ProcessOn Mindmap</a> 有了这个地图之后，在遇到一些完全不懂知识点，就可以简单分为两类： :::success</p><ol><li><strong>这个知识点属于某一个我已知晓的模块，那就往这上面靠拢。</strong></li><li><strong>这是我完全没有了解过的全新领域，开辟一个新的模块。</strong></li></ol><p>:::</p><blockquote><p>大家可以尝试画一下当前的知识地图情况。推而广之，目前自己整体的知识体系是个什么样子的。</p></blockquote><p><a name="UgCb0"></a></p><h3 id="常用学习方法" tabindex="-1"><a class="header-anchor" href="#常用学习方法"><span>常用学习方法</span></a></h3><p><a name="bV6fs"></a></p><h4 id="学习技巧" tabindex="-1"><a class="header-anchor" href="#学习技巧"><span>学习技巧</span></a></h4><ol><li>**用不同的方式来学习某一个东西。**看书，听课，看博客，看别人学习记录，画图，实践等。举个最简单的例子：打游戏的时候看别人的录像来学习。</li><li><strong>不要主动或者被动的打断</strong>。找个安静的，不容易被打扰的地方。耳机一带，谁也不爱。至少30分钟，不要去看手机。</li><li><strong>一图胜千言。</strong> 多画图，画图本身就是对知识点的高度总结。</li><li><strong>用已知去推导和关联未知。</strong> 我们常常说的“这不就是A和B的结合嘛”。这样可以快速对一个未知的知识点有一个整体上的认识。</li><li><strong>勇敢的去分享。</strong> 每次和同事，朋友的分享都会让你对某个知识点有一个完整的认识，并且很容易发现自己对于哪一块掌握的还不熟悉。</li><li>**多实践，多犯错。**实践是检验真理的唯一标准。实践难免犯错误，总结经验教训，你会认识得更深刻。但是，别人已经犯过的并且明确告诉你的地方，就不要再摔倒了。简单的低级的错误，绝对不要犯两次。</li><li>**别记答案，记方法。**从小学唠叨到现在，以后你们工作后还会继续唠叨，只不过有了一个新的名词：<strong>方法论</strong>。 <a name="CxK16"></a></li></ol><h4 id="五步学习法" tabindex="-1"><a class="header-anchor" href="#五步学习法"><span>五步学习法</span></a></h4><ol><li>快速浏览一遍，大致知道所讲内容和知识点，以及分布情况。对整体有一个大概的认识。</li><li>带着问题，边看边想。是什么，为什么，使用场景，有没有其他方案。</li><li>无论简单与否，动手实践以下。加深印象。</li><li>理解内容，开始复述。讲一下每一段的大意和细节，越详细越好。能输出就输出，可以用语言转文字。查找知识空缺。</li><li>定期复习，常看常新。或者用到某一块的时候，就再翻翻看看。 <a name="go8el"></a></li></ol><h4 id="学新技术时" tabindex="-1"><a class="header-anchor" href="#学新技术时"><span>学新技术时</span></a></h4><ol><li>诞生的背景是什么，是为了解决什么问题。</li><li>优劣是什么。解决了什么问题，引入了什么问题。</li><li>适合哪些场景。</li><li>核心组件有哪些。关键节点在哪里。</li><li>使用了哪些底层原理。</li><li>目前是否存在已有方案。两者对比，有什么优劣。 <a name="rqnGU"></a></li></ol><h3 id="举一反三" tabindex="-1"><a class="header-anchor" href="#举一反三"><span>举一反三</span></a></h3><p>举一隅不以三隅反。举一反三是一门技能，需要着重培养。我们可以把举一反三拆分成三个能力：<strong>联想，抽象，思辨</strong></p><ol><li>联想。我们其实每天都在做。通过一个事想到另一个事情。</li><li>抽象。核心技能。需要你能够透过现象看本质，并且将本质抽象为一个模型，或者套路。后续的问题只要符合这个套路就都可以用这类思路来解决。</li><li>思辨。可以简单认为左右互搏。当你想到一个方案的时候，可以多角度，多立场的来观察，挑战以下，看看是否有漏洞。进而提高自己能够完整又全面的分析问题的能力。<strong>有助于以后做需求分析和技术方案</strong>。</li></ol><p>训练方法：</p><ol><li>设计一个场景，尝试提出各种各样的问题。</li><li>对于一个问题，尽可能想到多种解决方案，并熟知各个方案的优劣。（房谋杜断）</li><li>对于一个方案，要有各种测试和预案，使其健壮并完善。</li></ol><p>:::success <strong>举一反三，本质是方法论，是思考能力，可以间接提升学习能力。</strong> :::</p><p><a name="FsxN5"></a></p><h3 id="归纳与实践" tabindex="-1"><a class="header-anchor" href="#归纳与实践"><span>归纳与实践</span></a></h3><blockquote><p>归纳和实践可以认为是优化并丰富你的知识地图。学而不思则罔，思而不学则殆。</p></blockquote><p>学完一篇课文后，老师都会让你进行中心思想的总结。这就是归纳的一种。最简单的归纳，是能够用自己的语言把事情复述一遍。 :::success <strong>我们的知识体系越完整，内容越丰富，对知识进行归纳和总结也就越轻松。</strong> :::</p><p>所以，不必一开始就想着去归纳和总结。一开始，我们应该是扩大自己的知识面，多阅读，多积累，开眼界。尽量多的去和别人交流，听别人分享，讨论然后思辨。闭门造车，吃独食这种，结果一定是落后就要挨打的。</p><p>如何归纳一门技术。可以有如下三步走：</p><ol><li>对于整体有一个大致的认识，建立一个良好的大局观。</li><li>对整体进行解构，去掉包装，去掉表面，去掉多余的细节。找到规律，关节点，核心内容。</li><li>再重组。将每个小模块组装到一起，同时加入自己的理解。</li></ol><p>这样就得到了一个属于自己的知识块，后续具体把他放到知识地图的哪一块，就看自己的理解了。如果可以，把自己的理解分享给其他人，听听别人的意见和想法。</p><p>归纳的能力会同时提升你的两样能力：<strong>抓重点和化繁为简</strong>。进而提高你的学习能力。</p><blockquote><p>当你归纳能力训练的差不多后，你能很快读完一本小说，看完一部电视剧。然后讲给别人听。甚至可以从局中人的视角展开故事。</p></blockquote><p>实践是检验真理的唯一标准。 Eat your own dog food（实践出真知）， 如人饮水冷暖自知。很多场景，很多中间件，你不去理解，不犯错误，是很难很难理解的。尤其是刚开始的入门的时候。 <a name="O7Lgz"></a></p><h2 id="如何学习源码" tabindex="-1"><a class="header-anchor" href="#如何学习源码"><span>如何学习源码？</span></a></h2><p><a name="wqF3S"></a></p><h3 id="文档-代码和博客" tabindex="-1"><a class="header-anchor" href="#文档-代码和博客"><span>文档，代码和博客</span></a></h3><p>学习源码正常情况有这三来渠道：</p><ol><li>官方文档。会写一些常用的场景，和入门教程。会教你怎么用。</li><li>源码。绝大多数的代码都是开源的，可以直接阅读源码的。源码里藏着所有的细节。</li><li>博客。博客内容里基本上也是两类：一类是多种场景下的具体用法。一类是对源码的解读。</li></ol><p>:::success 没有什么对错，只有合适不合适。不同的阶段，看不同的东西，这样提升比较快。 ::: <a name="MVgMX"></a></p><h3 id="具体思路" tabindex="-1"><a class="header-anchor" href="#具体思路"><span>具体思路</span></a></h3><p>先外后内。三个阶段：</p><ol><li>先学会用。这个阶段多看官方文档和具体用法的博客。把这块技术或者功能的使用技巧掌握，知道它适用那些场景，不适用那些场景。</li><li>了解全局情况。这个阶段可以读书，也可以读文档，最好是读别人的博客。具体要求就是<strong>胸有成竹</strong>。知道这块源码的底层原理，核心模块。</li><li>看源码，抠细节。直接读源码，辅助以博客。重点是核心模块的具体实现方法，底层原理的实现方法。附带看一下代码风格，和一些代码小技巧。</li></ol><p>无论怎么学，知识一定是一块一块的吸收的，既不是系统的，也不是结构化的，更别提什么融会贯通，举一反三了。随着学习的深入，你会发现，一块一块的知识点组成了一个整体，进而就有了一个全面的认识。这是一个过程，有始有终。</p><p>读源码的方法：（在你完全熟悉用法的基础上）</p><ol><li>把基础知识，基础语法完全掌握。有些著名的开源组件，都是出自大佬的手笔。大佬们有一个普遍的思维：大道至简，大巧不工。一般用的都是基础语法，个别地方会用到高级用法。这是我们学习的一个点。</li><li>源码的组成。逻辑层，接口层，基础类型的定义等等，先把这些模块拆分出来。</li><li>核心模块的实现。在了解核心模块和底层原理的基础上，开始研究他的实现方法。此处可以学一下<strong>重点是代码的风格，编程的思维</strong></li><li>边界问题。任何组件都有其工作场景，最难处理的是各种边界问题。重点：<strong>有哪些边界问题，怎么解决的</strong></li><li>对于错误的态度和处理。<strong>错误不仅仅是错误</strong>，优秀的组件对于错误的认识和处理是可以借鉴，可以用在自己的工作中的。</li><li>核心算法的实现。同一个算法，不同的组件实现的方式也不太一样。可以扩展下知识面。</li><li>有条件的话，用编译器的调试工具跑一跑。</li></ol><p>小技巧：</p><ol><li>剥洋葱，从内到外，自上而下。</li><li>多画图。一图胜千言。流程图，时序图，模块图，数据流向图，ER关系图等等。</li><li>枝叶部分，不重要的直接跳过。只看核心逻辑。</li><li>跑一下，调试调试，看看源码里的测试用例。 <a name="Ad0CL"></a></li></ol><h2 id="让生活越过越好" tabindex="-1"><a class="header-anchor" href="#让生活越过越好"><span>让生活越过越好</span></a></h2><p>大家都有一种，明明懂得很多道理，还是过不好这一生。坦率讲有两个原因：</p><ol><li>懂得还不够多。</li><li>对于什么算好，没有明确的定义。</li></ol><p><a name="MMmHa"></a></p><h3 id="个人感悟" tabindex="-1"><a class="header-anchor" href="#个人感悟"><span>个人感悟</span></a></h3><p>我不敢说帮大家解决人生大事，但是有些人生感悟还是很想和大家分享分享的。</p><p>首先，不要骗自己。有时候我们会对自己说，你已经很努力了，休息会吧。你已经很久没喝奶茶了，今天来一杯吧。这种对自己的欺骗，会降低自律，会让你逐渐变得懒惰和懊悔。结局就是变成持续性垂头丧气，间歇性踌躇满志。</p><p>其次，不要被低级的乐趣迷惑。吃一顿美食，刷一会抖音，看一会搞笑视频，看一会综艺等等，这些带来的都是非常短暂的，非常低级的乐趣。如果快感来的如此简单，以后再也不会想着去获取更高层级的快感。比如通过持续的努力拿到高薪或者升职，或者拿到什么资质，又或者持续减肥，练出马甲线，腹肌之类，再或者读完一本名著，传记后那种复杂的情绪久久无法忘掉。<strong>其实大多数人早就丧失了获得这类快感的能力。</strong></p><p>最后，不要把时间碎片化。我们一天只有24小时，抛开睡觉吃饭工作剩下的时间不足八小时，这八小时本身就是以碎片的形式穿插在各种事情中间的。如果我们再将大块的碎片，拆的更小，那我们这些时间能用来干什么？刷抖音，看微博，看会朋友圈。还会有时间去学习和提高自己么，还有时间去社交，去尽兴的玩，去外面兜兜转转看看风景么。明确的讲，连晒太阳的功夫都没有。碎片化时间越多，琐事就越多，生活质量就会下降。正确的做法是： :::success</p><ol><li>提高效率。多思考那些东西可以提升工作，或者是办事效率。</li><li>尽可能将小的碎片时间凑一个较大块的时间。</li></ol><p>::: 这样你会发现，自己一天能做很多事，还有闲暇时间充充电。</p><p><strong>这“三个不要”千万别犯，因为你一旦开了口子，以后基本上就收不住了。</strong><a name="IygBk"></a></p><h3 id="一些小建议" tabindex="-1"><a class="header-anchor" href="#一些小建议"><span>一些小建议</span></a></h3><ol><li>如果对某个电影感兴趣，直接去看原片，不要看片段剪辑或者快餐。</li><li>如果对某部小说感兴趣，直接看原著，其次是改变的电影动画，不要去听书，不要领读，不要带读。这些通通没有用。</li><li>如果对某项技能（比如锻刀大赛，模型，或者健身跳舞），尽可能去找业界大佬的分享和作品，不要看那些半瓶子的UP主的内容。</li><li>如果对某块知识感兴趣（比如天文地理历史文学等），可以先看相关的文献把基础知识补一下，或者看专门做相关知识分享的UP主，有一个自己初步的认识后再去看视频，纪录片等。</li></ol><p><strong>少看短视频，少看短视频，少看短视频。它讲的信息量又少又片面。</strong></p><p>:::success 其实你不用做很多，你只要稍微改变一点点，就能超过百分之90以上的人。 :::</p><p><a name="qJXKg"></a></p><h2 id="推荐" tabindex="-1"><a class="header-anchor" href="#推荐"><span>推荐</span></a></h2><p>电影/电视： 《爆裂鼓手》 《后翼弃兵》 《legal high》 动漫： 《红猪》 《起风了》 《听到涛声》 《轻音少女》</p><p>一些优质的博客或者UP主： <a href="https://xiaolincoding.com/" target="_blank" rel="noopener noreferrer">Home</a>&lt; <a href="https://draveness.me/" target="_blank" rel="noopener noreferrer">面向信仰编程</a><a href="https://space.bilibili.com/1402562141?spm_id_from=333.1007.tianma.2-2-4.click" target="_blank" rel="noopener noreferrer">杭电ACM刘春英老师的个人空间-杭电ACM刘春英老师个人主页-哔哩哔哩视频</a><a href="https://space.bilibili.com/1324259795/?spm_id_from=333.999.0.0" target="_blank" rel="noopener noreferrer">硬核课堂的个人空间-硬核课堂个人主页-哔哩哔哩视频</a><a href="https://space.bilibili.com/525438321/?spm_id_from=333.999.0.0" target="_blank" rel="noopener noreferrer">代码随想录的个人空间-代码随想录个人主页-哔哩哔哩视频</a></p>',141),o={},s=(0,i(2991).A)(o,[["render",function(l,e){return(0,t.uX)(),(0,t.CE)("div",null,[a,n,(0,t.Q3)(" more "),r])}]]),p=JSON.parse('{"path":"/posts/%E5%8D%9A%E6%96%87/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/On%20Your%20Mark.html","title":"ON YOUR MARK","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-03-25T00:00:00.000Z","author":false,"category":["博文","修养"],"tag":["博文","程序员","自我修养"],"star":true,"cover":"/self-cultivation/7.png","dir":{"order":2},"description":"如何高效学习","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E5%8D%9A%E6%96%87/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/On%20Your%20Mark.html"}],["meta",{"property":"og:site_name","content":"ik楠の空间"}],["meta",{"property":"og:title","content":"ON YOUR MARK"}],["meta",{"property":"og:description","content":"如何高效学习"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/self-cultivation/7.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-19T11:48:56.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://mister-hope.github.io/self-cultivation/7.png"}],["meta",{"name":"twitter:image:alt","content":"ON YOUR MARK"}],["meta",{"property":"article:author","content":"iknan"}],["meta",{"property":"article:tag","content":"博文"}],["meta",{"property":"article:tag","content":"程序员"}],["meta",{"property":"article:tag","content":"自我修养"}],["meta",{"property":"article:published_time","content":"2024-03-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-19T11:48:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ON YOUR MARK\\",\\"image\\":[\\"https://mister-hope.github.io/self-cultivation/7.png\\",\\"https://mister-hope.github.io/self-cultivation/8.png\\",\\"https://mister-hope.github.io/self-cultivation/9.png\\",\\"https://mister-hope.github.io/self-cultivation/10.png\\",\\"https://mister-hope.github.io/self-cultivation/11.png\\"],\\"datePublished\\":\\"2024-03-25T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-19T11:48:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"iknan\\",\\"url\\":\\"https://iknan.love\\"}]}"]]},"headers":[{"level":2,"title":"学习的本质是坚持","slug":"学习的本质是坚持","link":"#学习的本质是坚持","children":[{"level":3,"title":"永不退休的宫崎骏","slug":"永不退休的宫崎骏","link":"#永不退休的宫崎骏","children":[]},{"level":3,"title":"都是笨蛋","slug":"都是笨蛋","link":"#都是笨蛋","children":[]}]},{"level":2,"title":"首先是态度问题","slug":"首先是态度问题","link":"#首先是态度问题","children":[{"level":3,"title":"给自己一个目标","slug":"给自己一个目标","link":"#给自己一个目标","children":[]}]},{"level":2,"title":"主动与被动","slug":"主动与被动","link":"#主动与被动","children":[{"level":3,"title":"面对枯燥","slug":"面对枯燥","link":"#面对枯燥","children":[]}]},{"level":2,"title":"学习的方法","slug":"学习的方法","link":"#学习的方法","children":[{"level":3,"title":"收集与鉴别信息","slug":"收集与鉴别信息","link":"#收集与鉴别信息","children":[]},{"level":3,"title":"知识地图","slug":"知识地图","link":"#知识地图","children":[]},{"level":3,"title":"常用学习方法","slug":"常用学习方法","link":"#常用学习方法","children":[]},{"level":3,"title":"举一反三","slug":"举一反三","link":"#举一反三","children":[]},{"level":3,"title":"归纳与实践","slug":"归纳与实践","link":"#归纳与实践","children":[]}]},{"level":2,"title":"如何学习源码？","slug":"如何学习源码","link":"#如何学习源码","children":[{"level":3,"title":"文档，代码和博客","slug":"文档-代码和博客","link":"#文档-代码和博客","children":[]},{"level":3,"title":"具体思路","slug":"具体思路","link":"#具体思路","children":[]}]},{"level":2,"title":"让生活越过越好","slug":"让生活越过越好","link":"#让生活越过越好","children":[{"level":3,"title":"个人感悟","slug":"个人感悟","link":"#个人感悟","children":[]},{"level":3,"title":"一些小建议","slug":"一些小建议","link":"#一些小建议","children":[]}]},{"level":2,"title":"推荐","slug":"推荐","link":"#推荐","children":[]}],"git":{"createdTime":1721299423000,"updatedTime":1721389736000,"contributors":[{"name":"iknan","email":"149158995+iknan@users.noreply.github.com","commits":4}]},"readingTime":{"minutes":24.99,"words":7497},"filePathRelative":"posts/博文/程序员的自我修养/On Your Mark.md","localizedDate":"2024年3月25日","excerpt":"\\n<blockquote>\\n<p>如何高效学习</p>\\n</blockquote>\\n","autoDesc":true}')}}]);