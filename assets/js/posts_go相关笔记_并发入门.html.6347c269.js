"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[1346],{2991:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},781:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>h,data:()=>e});var n=a(2360);const l=[(0,n.Fv)('<h1 id="并发入门" tabindex="-1"><a class="header-anchor" href="#并发入门"><span>并发入门</span></a></h1><p><a name="907daa73"></a></p><h2 id="并发与并行" tabindex="-1"><a class="header-anchor" href="#并发与并行"><span>并发与并行</span></a></h2><p><a name="923dd7a2"></a></p><h3 id="简单介绍" tabindex="-1"><a class="header-anchor" href="#简单介绍"><span>简单介绍</span></a></h3><blockquote><p>这一块内容我们只简单提一下，不会展开。相关问题可以直接在网上找资料，非常全面。</p></blockquote><p>在讨论并发之前，必须得先讲清楚<strong>并发</strong>和<strong>并行</strong>，以及他们两个之间的区别，还有各自会有哪些常见的问题。这两个名词都是操作系统里的概念：</p><ul><li>并发是指两个或多个事件在同一时间间隔内发生。</li><li>并行性是指系统具有同时进行运算或操作的特性。</li></ul><p>举个例子： 并发就是<strong>多个人一起去银行柜台取钱</strong>。并行就是<strong>银行柜台可以同时帮你取现，还可打印取款记录</strong>。 对应计算机就是这个场景： 并发就是很多人都同时访问某一个服务或者资源，比如秒杀，或者一些热门视频。并行就是你的电脑上可以同时打游戏，看视频，听歌。正常情况下，我们的服务是<strong>既可以并发也可以并行</strong>的。</p><p>引申，关于并发和并行可以延伸很多场景和问题。比如：<strong>异步与同步</strong>，<strong>阻塞与非阻塞</strong>。大家可以补充一下这块的知识。</p><p><a name="67f8b8be"></a></p><h3 id="go并发编程模型" tabindex="-1"><a class="header-anchor" href="#go并发编程模型"><span>GO并发编程模型</span></a></h3><p>首先，我们这里要先引入第一个问题：在操作系统中，<strong>进程和线程</strong>是什么？<strong>协程</strong>是什么？我们这里不做回答。这些问题的答案网上已经很多了，他们依然属于操作系统的知识体系。 其次，我们再来看一句GO经典谚语：</p><blockquote><p>Don’t communicate by sharing memory; share memory by communicating.</p></blockquote><p><strong>不要通过共享内存来通信，而应该通过通信来共享内存。<strong>这是作为 Go 语言的主要创造者之一的</strong>Rob Pike</strong>的至理名言，这也充分体现了Go言最重要的编程理念。而<strong>Channel</strong>恰恰是后半句话的完美实现，我们可以利用<strong>通道</strong>在多个<strong>GoRoutine</strong>之间传递数据。（这也是Channel最重要的使用场景） 最后，GO并发编程的模型我们通常管他叫做GMP模型，我们在这里只简单说下他的含义，不会过多展开。</p><ul><li>G指的是我们的GoRoutine，即一个需要被执行的协程。</li><li>M指的是Machine，即系统线程。由操作系统统一调度和管理，我们的GoRoutine最终需要再M上用来执行。</li><li>P指的是Processor，GO语言自己的处理器。它维护着我们所有的GoRoutine，并负责给他安排对应的M来执行。</li></ul><blockquote><p>GMP是GO语言里少有的，很少用到但不得不背的八股文之一。</p></blockquote><p><a name="Channel"></a></p><h2 id="channel" tabindex="-1"><a class="header-anchor" href="#channel"><span>Channel</span></a></h2><p><strong>Channel</strong>的源码在 <a href="https://draveness.me/golang/tree/runtime.hchan" target="_blank" rel="noopener noreferrer">runtime.hchan</a> ，根据源码就可以理解课程里一些常见的知识点。</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> hchan</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> qcount</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">   uint</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> //当前通道中的元素个数。</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> dataqsiz</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> uint</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> //当前循环队列的长度。</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> buf</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">      unsafe</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Pointer</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> //指向缓冲区的指针</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> elemsize</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> uint16</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> //通道元素的大小</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> closed</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">   uint32</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> //是否关闭</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> elemtype</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">_type</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> //通道元素的类型</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> sendx</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    uint</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  //发送操作处理到的位置</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> recvx</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    uint</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  //接收操作处理到的位置</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> recvq</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">    waitq</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> //被阻塞的接收操作队列 链表结构</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> sendq</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">    waitq</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> //被阻塞的发送操作队列 链表结构</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> lock</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> mutex</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> //互斥锁</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>缓冲区本身是一个数组。</p></blockquote><p><a name="2c289099"></a></p><h3 id="定义与使用方法" tabindex="-1"><a class="header-anchor" href="#定义与使用方法"><span>定义与使用方法</span></a></h3><p>俗称：<strong>通道</strong>，是GO语言所有基础类型中唯一的满足并发安全的类型。我们常用的切片，MAP和结构体都不能并发6操作，只有Channel可以。这也是GO语言的并发操作被大家称赞的原因之一：<strong>简单，安全，开箱即用</strong>。</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//注意，必须使用make来创建</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ch</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> make</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">chan</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//非缓冲通道</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ch1</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> make</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">chan</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//带有三个缓存区的通道</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>Channel</strong> 收发操作均遵循了先入先出（<strong>FIFO</strong>）的设计：通道中的各个元素值都是严格地按照发送的顺序排列的，先被发送通道的元素值一定会先被接收。</p></blockquote><p>对于Channel的写入和读取都会使用**&lt; -**。左边的尖括号代表方向。</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> main</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#98C379;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  ch1</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> make</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">chan</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//声明一个有三个缓存区的Channel，类型为int</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  ch1</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &lt;-</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> //向通道写入一个值</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  ch1</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &lt;-</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  ch1</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &lt;-</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 3</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  elem1</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &lt;-</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ch1</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> //从通道中读取一个值</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;The first element received from channel ch1: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">%v</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    elem1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>Channel</strong>跟<strong>string</strong>或<strong>slice</strong>有些不同，它在栈上只是一个指针，实际的数据都是由指针所指向的堆上面。</p></blockquote><p>注意，我们上面创建的是双向通道，GO还有单向通道。默认情况下，我们都会使用双向通道。</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> uselessChan1</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> make</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">chan</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;-</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//单向发通道</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> uselessChan2</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> make</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;-</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">chan</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//单向收通道</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>单向通道在实际工作中很少很少会用到，它基本上只有一个用处，<strong>约束函数行为</strong>。</p><p><a name="366f367e"></a></p><h3 id="通道操作的特性" tabindex="-1"><a class="header-anchor" href="#通道操作的特性"><span>通道操作的特性</span></a></h3><ol><li>对于同一个通道，发送操作之间是互斥的，接收操作之间也是互斥的。</li><li>发送操作和接收操作中对元素值的处理都是原子性的。</li><li>发送操作在完全完成之前会被阻塞。接收操作也是如此。</li></ol><p>第一个特性：对于同一个通道<strong>Channel</strong>，你可以同时发送和接收，但是不能同时接收或者发送，也就是说它的操作都是串行的，阻塞的。另外，对于<strong>Channel</strong>具体的元素也不能同时发送或者接收。</p><p>第二个特性：可以简单理解为，对于<strong>Channel</strong>中某个元素的操作是原子性的。要么成功，要么失败，只有这两种结果，绝对不会出现部分成功的情况。我们以取一个元素为例，当我们操作Channel的时候实际上有这几个步骤：</p><blockquote><p>找到元素-&gt;取元素的副本-&gt;将副本交给接收方-&gt;删除Channel中这个元素</p></blockquote><p>我们最终能收到的就是这一串操作要么成功，要么失败，不会有中间态。这是Channel是并发安全的一个体现。</p><p>第三个特性其实是第一个的补充。最终目的就是为了实现元素和通道操作的原子性。 关于通道的阻塞，我们需要分开来说明：</p><p><a name="7430bb62"></a></p><h3 id="非缓冲通道" tabindex="-1"><a class="header-anchor" href="#非缓冲通道"><span>非缓冲通道</span></a></h3><p>对于非缓冲通道而言，事情非常简单。它不需要存很多东西，只需要记录一个值。详细情况： **必须同时有协程对一个非缓冲的Channel同时进行读写，否则一定会阻塞。**有些错误的写法会直接导致死锁：</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ch1</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> make</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">chan</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ch1</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &lt;-</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 2</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//在main函数中执行，一定会爆出：fatal error: all goroutines are asleep - deadlock!</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//这里有两个原因，之后我们会再次展开。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正确的用法：</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> ch1</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> make</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">chan</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> go</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> goC1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ch1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> ch1</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &lt;-</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> //这里也可以用协程来实现</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> time</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> goC1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">c</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> chan</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ok</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &lt;-</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">c</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> //这里的OK 有一个特殊含义，用来表示通道是否关闭。</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>非缓冲通道，通常是用来进行<strong>同步数据操作</strong>，日常开发中用到的地方不多。</p><p><a name="32630c4b"></a></p><h3 id="缓冲通道" tabindex="-1"><a class="header-anchor" href="#缓冲通道"><span>缓冲通道</span></a></h3><p>对于缓冲通道而言，相对复杂点。</p><ol><li>如果缓冲通道已经塞满了，那么后续的写操作会阻塞，直到通道里有空余位置。</li><li>如果缓冲通道是空的，那么后续的读操作会阻塞，直到通道里有新的数据。</li></ol><p>另外，后续阻塞的<strong>协程</strong>也会以队列的形式组织起来，先等待的先执行。</p><p><a name="632dcd02"></a></p><h3 id="使用细节" tabindex="-1"><a class="header-anchor" href="#使用细节"><span>使用细节</span></a></h3><p>跟channel相关的操作有：初始化/读/写/关闭。<strong>Channel</strong>未初始化值就是nil，未初始化的<strong>Channel</strong>是不能使用的。下面是一些操作规则：</p><ul><li>读或者写一个nil的<strong>Channel</strong>的操作会永远阻塞。</li><li>读一个关闭的<strong>Channel</strong>会立刻返回一个<strong>Channel</strong>元素类型的零值。</li><li><strong>写或者关闭一个关闭的Channel会导致panic</strong>。</li></ul><blockquote><p>一个经典问题：操作一个已关闭的Channel会发生什么。 引申，为什么不建议让接收方关闭通道。</p></blockquote><p><a name="f2071e92"></a></p><h2 id="如何使用channel" tabindex="-1"><a class="header-anchor" href="#如何使用channel"><span>如何使用Channel</span></a></h2><p><a name="0c5707fd"></a></p><h3 id="for-range-遍历" tabindex="-1"><a class="header-anchor" href="#for-range-遍历"><span>For Range 遍历</span></a></h3><blockquote><p>这是很少会用的方法，一般公司内或者项目内也会有明文规定，不推荐使用这种方式获取一个通道内的数据。</p></blockquote><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">chs</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> make</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">([]</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> ch</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> chs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{ </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//注意这一行，所有关键节点都在这里。</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;ch:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">%v</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ch</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里要记得只有三种情况：</p><ol><li>如果<strong>chs</strong>中没有任何数据，那么程序会阻塞在<strong>For</strong>这一行，直到有数据进来为止。</li><li>如果<strong>chs</strong>已经被关闭了，那么程序会把所有元素都遍历完，再跳出循环。</li><li>如果<strong>chs</strong>是nil，那么程序会永远阻塞在<strong>For</strong>这一行，不会往下执行。</li></ol><p><a name="Select"></a></p><h3 id="select" tabindex="-1"><a class="header-anchor" href="#select"><span>Select</span></a></h3><blockquote><p>最常用的方法，通常会结合 for 一起使用。</p></blockquote><p>这里直接贴郝琳老师的源码：</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// </span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 准备好几个通道。</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ntChannels</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">chan</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  make</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">chan</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  make</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">chan</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  make</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">chan</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 随机选择一个通道，并向它发送元素值。</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">index</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Intn</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;The index: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">intChannels</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;-</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> index</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 哪一个通道中有可取的元素值，哪个对应的分支就会被执行。</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">case</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &lt;-</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">intChannels</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]:</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;The first candidate case is selected.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">case</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &lt;-</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">intChannels</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]:</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;The second candidate case is selected.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">case</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> elem</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &lt;-</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">intChannels</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]:</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;The third candidate case is selected, the element is </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">elem</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;No candidate case is selected!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这里可以直接模拟select的使用细节和场景。另外，这里大家可以把他拆分到多个GoRoutine中，来模拟并发。</p></blockquote><p>看下<strong>Select</strong>的注意事项：</p><ol><li>如果没有<strong>Default</strong>分支，当所有的<strong>Case</strong>都不满足要求时，会阻塞在<strong>Select</strong>这一行，直到有一个<strong>Case</strong>满足情况。</li><li>如果有<strong>Default</strong>分支，那么无论<strong>Case</strong>是否满足要求，<strong>Select</strong>都不会阻塞，他会直接执行<strong>Default</strong>。</li><li>一旦发现通道关闭了，需要及时处理。有利于程序稳定性。</li><li><strong>Select</strong>语句只会对所有的<strong>Case</strong>执行一次。正常情况，我们会结合<strong>For</strong>一起使用。这时候就需要注意，<strong>Select</strong>中的<strong>break</strong>不能直接跳出<strong>For</strong>。可以使用<strong>goto</strong>或者<strong>return</strong>跳出，一般情况下，不推荐使用goto，会降低代码的可读性。</li><li><strong>Select</strong>的<strong>Case</strong>是从上往下执行的，并且先执行<strong>Case</strong>条件判断，之后再执行某个<strong>Case</strong>下的代码，如果有多个<strong>Case</strong>满足执行要求，会伪随机挑选一个来执行。</li></ol><blockquote><p>问题引申：IO多路复用中的Select。</p></blockquote><p>问题：</p><ol><li>如果在select语句中发现某个通道已关闭，那么应该怎样屏蔽掉它所在的分支？</li></ol><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  select</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  case</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> _</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ok</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &lt;-</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ch1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">   if</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ok</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//发现当前通道已经关闭</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    ch1</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> make</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">chan</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//设置为无缓冲通道，这个Case会被永远阻塞。</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">   }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  case</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> ...</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> :</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">   ////</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  default</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">   //// </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>在select语句与for语句联用时，怎样直接退出外层的for语句？</li></ol><p>参考：<a href="https://stackoverflow.com/questions/25469682/break-out-of-select-loop" target="_blank" rel="noopener noreferrer">concurrency - Break out of select loop? - Stack Overflow</a> 可以用<strong>goto</strong>直接跳出循环，实际开发中，还是推荐将For-select 进行封装，使用return来跳出。 引申阅读：<a href="https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-channel/" target="_blank" rel="noopener noreferrer">https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-channel/</a></p>',80)],t={},h=(0,a(2991).A)(t,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,l)}]]),e=JSON.parse('{"path":"/posts/go%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/%E5%B9%B6%E5%8F%91%E5%85%A5%E9%97%A8.html","title":"并发入门","lang":"zh-CN","frontmatter":{"date":"2023-11-30T00:00:00.000Z","category":["后端","go语言","基础","并发"],"tag":["go","笔记","并发"],"author":"极客时间","icon":"devicon:go","description":"并发入门 并发与并行 简单介绍 这一块内容我们只简单提一下，不会展开。相关问题可以直接在网上找资料，非常全面。 在讨论并发之前，必须得先讲清楚并发和并行，以及他们两个之间的区别，还有各自会有哪些常见的问题。这两个名词都是操作系统里的概念： 并发是指两个或多个事件在同一时间间隔内发生。 并行性是指系统具有同时进行运算或操作的特性。 举个例子： 并发就是多...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/go%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/%E5%B9%B6%E5%8F%91%E5%85%A5%E9%97%A8.html"}],["meta",{"property":"og:site_name","content":"ik楠の空间"}],["meta",{"property":"og:title","content":"并发入门"}],["meta",{"property":"og:description","content":"并发入门 并发与并行 简单介绍 这一块内容我们只简单提一下，不会展开。相关问题可以直接在网上找资料，非常全面。 在讨论并发之前，必须得先讲清楚并发和并行，以及他们两个之间的区别，还有各自会有哪些常见的问题。这两个名词都是操作系统里的概念： 并发是指两个或多个事件在同一时间间隔内发生。 并行性是指系统具有同时进行运算或操作的特性。 举个例子： 并发就是多..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-19T11:48:56.000Z"}],["meta",{"property":"article:author","content":"极客时间"}],["meta",{"property":"article:tag","content":"go"}],["meta",{"property":"article:tag","content":"笔记"}],["meta",{"property":"article:tag","content":"并发"}],["meta",{"property":"article:published_time","content":"2023-11-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-19T11:48:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"并发入门\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-11-30T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-19T11:48:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"极客时间\\"}]}"]]},"headers":[{"level":2,"title":"并发与并行","slug":"并发与并行","link":"#并发与并行","children":[{"level":3,"title":"简单介绍","slug":"简单介绍","link":"#简单介绍","children":[]},{"level":3,"title":"GO并发编程模型","slug":"go并发编程模型","link":"#go并发编程模型","children":[]}]},{"level":2,"title":"Channel","slug":"channel","link":"#channel","children":[{"level":3,"title":"定义与使用方法","slug":"定义与使用方法","link":"#定义与使用方法","children":[]},{"level":3,"title":"通道操作的特性","slug":"通道操作的特性","link":"#通道操作的特性","children":[]},{"level":3,"title":"非缓冲通道","slug":"非缓冲通道","link":"#非缓冲通道","children":[]},{"level":3,"title":"缓冲通道","slug":"缓冲通道","link":"#缓冲通道","children":[]},{"level":3,"title":"使用细节","slug":"使用细节","link":"#使用细节","children":[]}]},{"level":2,"title":"如何使用Channel","slug":"如何使用channel","link":"#如何使用channel","children":[{"level":3,"title":"For Range 遍历","slug":"for-range-遍历","link":"#for-range-遍历","children":[]},{"level":3,"title":"Select","slug":"select","link":"#select","children":[]}]}],"git":{"createdTime":1721389736000,"updatedTime":1721389736000,"contributors":[{"name":"iknan","email":"149158995+iknan@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":9.9,"words":2970},"filePathRelative":"posts/go相关笔记/并发入门.md","localizedDate":"2023年11月30日","excerpt":"\\n<p><a name=\\"907daa73\\"></a></p>\\n<h2>并发与并行</h2>\\n<p><a name=\\"923dd7a2\\"></a></p>\\n<h3>简单介绍</h3>\\n<blockquote>\\n<p>这一块内容我们只简单提一下，不会展开。相关问题可以直接在网上找资料，非常全面。</p>\\n</blockquote>\\n<p>在讨论并发之前，必须得先讲清楚<strong>并发</strong>和<strong>并行</strong>，以及他们两个之间的区别，还有各自会有哪些常见的问题。这两个名词都是操作系统里的概念：</p>\\n<ul>\\n<li>并发是指两个或多个事件在同一时间间隔内发生。</li>\\n<li>并行性是指系统具有同时进行运算或操作的特性。</li>\\n</ul>","autoDesc":true}')}}]);