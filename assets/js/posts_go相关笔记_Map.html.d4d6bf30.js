"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[22],{2991:(s,i)=>{i.A=(s,i)=>{const a=s.__vccOpts||s;for(const[s,n]of i)a[s]=n;return a}},1848:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>l,data:()=>p});var n=a(2360);const t=[(0,n.Fv)('<h1 id="map" tabindex="-1"><a class="header-anchor" href="#map"><span>Map</span></a></h1><blockquote><p>本文为极客时间《Go语言核心36讲》的学习笔记，梳理了相关的知识点。</p></blockquote><p><a name="83fbca9d"></a></p><h2 id="map的简介" tabindex="-1"><a class="header-anchor" href="#map的简介"><span>Map的简介</span></a></h2><p>Map数据结构有多种多样的名称：<strong>哈希表，散列，字典，Map，键值对</strong>，这些都是广义上的Map数据类型。Map类型的数据结构在大多数的编程语言中都有支持，日常使用最多，面试最经常问到的是<strong>GO语言中的Map</strong>和<strong>Redis中的字典</strong>。</p><p>这是GO语言官方文档的描述：</p><blockquote><p>Maps are a convenient and powerful built-in data structure that associate values of one type (the key) with values of another type (the element or value).</p></blockquote><p>Map基本上是GO里面最经常，甚至所有技术组件，编程语言中最经常使用到的一个数据结构，它有一个显著的特点：</p><ol><li>性能非常优秀。O(1)的复杂度。</li><li>通过键值对，可以实现一个元素与另一个元素的映射。</li></ol><p>在实际使用中，我们可以用Map作为复杂数据的中间结构，进而实现多个数据的组合。</p><p><a name="b6724cff"></a></p><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h2><p>Map的底层实现原理就是哈希（hash），它的用处非常广泛，我们后续的学习和工作中，会多次遇到。设计一个好的Map结构，必须要解决两个问题：</p><ol><li>哈希函数</li><li>解决冲突</li></ol><p><a name="2b89c307"></a></p><h3 id="哈希函数" tabindex="-1"><a class="header-anchor" href="#哈希函数"><span>哈希函数</span></a></h3><p>Hash算法的定义：<strong>将任意长度的二进制值转换为固定长度的二进制值</strong>。举个具体点的例子:MD5。甭管你的文件包多大，最后都能给你转成一个固定长度的字符串。我们最常用到的哈希算法：<strong>取模</strong>。 评估一个哈希函数的优劣，要看下它产出的结果是否足够的均匀分布。越是分布的不均匀，越容易出现哈希冲突，越是降低整体性能。</p><p><a name="87ddc062"></a></p><h3 id="冲突解决" tabindex="-1"><a class="header-anchor" href="#冲突解决"><span>冲突解决</span></a></h3><p>目前常用的哈希冲突方案有:<strong>开放寻址法和拉链法</strong>。我们简单介绍下：</p><p><a name="0c8f3834"></a></p><h4 id="开放寻址法" tabindex="-1"><a class="header-anchor" href="#开放寻址法"><span>开放寻址法</span></a></h4><p>开放寻址法的底层是一个一维数组，当我们执行取模后，找到对应的位置，如果当前位置已经存在数据了，就顺序往后找到一个可以用的位置，把数据放进去。查询的时候也是同样的道理，找到位置后，进行一次键值比较，不一样的话就依次往后寻找，直到找到对应的值，或者发现一个空位置就返回。开放寻址法中对性能影响最大的是<strong>装载因子</strong>，它是数组中元素的数量与数组大小的比值</p><blockquote><p>开放寻址的寻址方法也是可以优化的，可以详细读下复杂一点的寻址算法。</p></blockquote><p>开放寻址法的好处是结构简单，缺点是如果数据塞得太多也就是装在因子过大，会严重降低性能。当装载因子等于1时，就相当于直面数组结构，完全失去了Map的意义。</p><p><a name="a3bd1065"></a></p><h4 id="拉链法" tabindex="-1"><a class="header-anchor" href="#拉链法"><span>拉链法</span></a></h4><p>拉链法是最常用的解决冲突的办法，我们后续遇到的大多数Map场景都是通过拉链法解决的。相比开放寻址，拉链法的底层结构要复杂一些，在一维数组的基础上，增加了一层链表，或者你可以简单将其理解为二维数组。数组的第一维装哈希桶的编号，二维装同在一个桶内的数据。查询的时候先找到键值所在的桶，然后去逐个比较键值，找到桶内对应的数据。 理论上，为了保证性能，每个桶内的数据都在个位数。随着数据量增加，我们只需要扩容桶的数量就行。拉链法的优势：</p><ol><li>实际存储地址，也就是桶内的存储空间，可以随用随取，降低开销。</li><li>可以通过扩容，降低数据量激增带来的性能损耗。</li></ol><p>这里充分体现了计算机工程学的终极思想：<strong>如果一层中间件搞不定，那就再加一层</strong>。</p><blockquote><p>引申，利用哈希冲突可以解决一些工程问题，可以看下布隆过滤器的原理。</p></blockquote><p><a name="362e3904"></a></p><h2 id="使用技巧" tabindex="-1"><a class="header-anchor" href="#使用技巧"><span>使用技巧</span></a></h2><p><a name="ec11c415"></a></p><h3 id="键值对" tabindex="-1"><a class="header-anchor" href="#键值对"><span>键值对</span></a></h3><p>Go语言的Map对于键值对是有要求的。我们之前提到过，GO语言里有值类型，引用类型等，有些类型是不能进行“==”操作的。对于Map而言，他的值类型，可以为任意类型，但是键类型是不允许出现<strong>函数类型，Map类型，切片类型</strong>的。</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//正常操作</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">aMap</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;one&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:    </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;two&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:    </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;three&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:  </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">M1</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{}]</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{} </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//可以用，但最好别这样写。</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">M2</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{}]</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{} </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//可以用，但千万别这样写</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//错误操作</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//这三类编译器会直接报错，无效的映射键类型: 必须为键类型完全定义比较运算符 == 和 !=</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">M3</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{}</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">M4</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()]</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{}</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">M5</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[[]</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么会出现这种情况？ 就像我们上面说过的，hash算法是<strong>无法保证百分百不重复</strong>的，Go处理哈希冲突的时候，需要再拿着<strong>键的值</strong>来进行一轮比较，这时候就需要<strong>键值的类型必须要能够进行“==”操作</strong>。 我们再来完整的讲一遍GoMap查询一个数据是否存在的流程： <img src="/golang/map1.png" alt="未命名文件 (1).png" loading="lazy"></p><p><a name="84881111"></a></p><h3 id="常用操作" tabindex="-1"><a class="header-anchor" href="#常用操作"><span>常用操作</span></a></h3><p><a name="86e79fca"></a></p><h4 id="声明" tabindex="-1"><a class="header-anchor" href="#声明"><span>声明</span></a></h4><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> M1</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  //不建议这样写</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">M2</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//千万别这样写。gofmt会提示的</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//以下方式都可以声明一个Map</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">M3</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{}</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">M4</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> make</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//这是比较推荐的方式。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//声明好后可以直接用,不会有任何问题。</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> M3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;str&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">M3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;str&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">M3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;str&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> M3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;str&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//M1 要单独说一下</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> M1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;str&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">M1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;str&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">M1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;str&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> //这里会报panic</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> M1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;str&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说，按照我们推荐的方式声明一个Map,读写操作不会有任何问题。但是操作一个值为nil的Map时，<strong>读操作,删除操作</strong>都不会有问题，<strong>写操作会Panic</strong>。</p><p><a name="ecff77a8"></a></p><h4 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h4><p>直接看代码：</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">M1</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> make</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//M1[&quot;str&quot;] = 1</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ok</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> M1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;str&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// value 默认为Map 定义的值，ok 固定位 bool 值</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> ok</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;str:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//可以合并：</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ok</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> M1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;str&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">];</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ok</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> //注意此处 value ok 的作用域</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;str:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="54898fa9"></a></p><h4 id="遍历" tabindex="-1"><a class="header-anchor" href="#遍历"><span>遍历</span></a></h4><p>GoMap的遍历是<strong>随机的，无序的</strong>，在使用时一定要注意！</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">M1</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> make</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//正序塞入数据</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">M1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">M1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 2</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">M1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 3</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">M1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 4</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">M1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 5</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> k</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">v</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> M1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;key:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">,value:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">k</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">v</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//不是每一次都是排好序的</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>引申，为什么Map的循环访问会出现乱序的情况？循环Map时，会从一个随机的位置开始。详情可以去看源码。</p></blockquote><p>如何实现Map的有序访问？</p><ol><li>使用切片，将Key先排好序，再遍历逐个去Map中取Value。</li><li>包装一个新的数据结构。链表，或者其他结构。</li></ol><p><a name="8826995e"></a></p><h2 id="map的底层设计" tabindex="-1"><a class="header-anchor" href="#map的底层设计"><span>Map的底层设计</span></a></h2><p>详情大家可以直接看最后的引申阅读，我这里只讲下我的阅读笔记：</p><ol><li><strong>在Map的实现中，哈希的低位用来参与计算桶的编号，高8位会冗余一份存在桶内，用来加快比较</strong>。</li><li>两个状态下会发生扩容：装载因子超过6.5；使用了大量的溢出桶。</li><li>每个桶里只能存8个KV对，超过这个数量会分配在溢出桶内。</li></ol><p>第一条非常具有参考价值。我在工作中经常会用这个方法来解决实际中的工程问题：比如记录用户信息和设备信息之间的对应关系。</p><p><a name="aada1ad3"></a></p><h2 id="问题引申" tabindex="-1"><a class="header-anchor" href="#问题引申"><span>问题引申</span></a></h2><p><a name="d50ef1c2"></a></p><h3 id="如何安全的使用map" tabindex="-1"><a class="header-anchor" href="#如何安全的使用map"><span>如何安全的使用Map?</span></a></h3><p>Map本身是不安全的，非原子操作的。多个GoRoutine并发操作Map轻则数据混乱，重则直接panic。如果要在并发中使用Map，要么自己加读写锁<strong>sync.RWMutex</strong>，要么使用<strong>sync.Map</strong>。</p><p><a name="f659f310"></a></p><h3 id="应该优先考虑哪些类型作为字典的键类型" tabindex="-1"><a class="header-anchor" href="#应该优先考虑哪些类型作为字典的键类型"><span>应该优先考虑哪些类型作为字典的键类型？</span></a></h3><p>原则上讲：<strong>求哈希和判等操作的速度越快，对应的类型就越适合作为键类型。</strong> 具体而言：优先选用<strong>数值类型</strong>和<strong>指针类型</strong>，其次使用长度固定的<strong>字符串</strong>，最好不要用高级类型（数组，结构体，接口等）除了效率比较低，还容易引发其他问题。</p><p><a name="Wdbph"></a></p><h3 id="go语言中的map如何扩容" tabindex="-1"><a class="header-anchor" href="#go语言中的map如何扩容"><span>Go语言中的Map如何扩容？</span></a></h3><p>扩容的时机：装载因子超过一定的阈值或者使用了太多的溢出桶时。 扩容的规则：</p><ol><li>等量扩容</li></ol><p>使用溢出桶太多的时候会进行等量扩容。申请和原来等量的内容，将原来的数据重新整理后，写入到新的内存中。可以简单的认为是一次内存整理，目的是提高查询效率。</p><blockquote><p>引申，如果没有等量扩容会出现什么问题？随着溢出桶缓慢增长，有内存溢出的风险。</p></blockquote><ol start="2"><li>增量扩容</li></ol><p>分成两步： 第一步进入扩容状态，先申请一块新的内存，翻倍增加桶的数量，此时<strong>buckets</strong>指向新分配的桶，<strong>oldbuckets</strong>指向原来的桶。 第二步，重新计算老的桶中的哈希值在新的桶内的位置（取模或者位操作），将旧数据用<strong>渐进式</strong>的方式拷贝到新的桶中。 渐进式迁移分两块，一方面会从第一个桶开始，顺序迁移每一个桶，如果下一个桶已经迁移，则跳过。另一方面，当我们操作某一个桶的元素时，会迁移两个桶，进而保证经过一些操作后一定能够完成迁移。 当我们访问一个正在迁移的Map时，如果存在<strong>oldbuckets</strong>，那么直接去中<strong>oldbuckets</strong>寻找数据。当我们遍历一个正在迁移的Map时，新的和旧的就会遍历，如果一个旧的的桶已经迁移走了，那么就直接跳过，反正不在旧的就在新的里。<strong>Map遍历本身就是无序的</strong>。</p><p><a name="0cd9706e"></a></p><h3 id="使用struct作为map的key时-有哪些注意事项" tabindex="-1"><a class="header-anchor" href="#使用struct作为map的key时-有哪些注意事项"><span>使用struct作为Map的Key时，有哪些注意事项</span></a></h3><p>引申阅读： <a href="https://juejin.cn/post/7177582930313609273#heading-45" target="_blank" rel="noopener noreferrer">go Map 设计与实现 - 掘金</a><a href="https://draveness.me/golang/docs/part2-foundation/ch03-datastructure/golang-hashmap" target="_blank" rel="noopener noreferrer">draveness.me</a></p>',79)],h={},l=(0,a(2991).A)(h,[["render",function(s,i){return(0,n.uX)(),(0,n.CE)("div",null,t)}]]),p=JSON.parse('{"path":"/posts/go%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/Map.html","title":"Map","lang":"zh-CN","frontmatter":{"date":"2023-11-30T00:00:00.000Z","category":["后端","go语言","基础"],"tag":["Map","哈希冲突","笔记","go"],"author":"极客时间","icon":"devicon:go","description":"Map 本文为极客时间《Go语言核心36讲》的学习笔记，梳理了相关的知识点。 Map的简介 Map数据结构有多种多样的名称：哈希表，散列，字典，Map，键值对，这些都是广义上的Map数据类型。Map类型的数据结构在大多数的编程语言中都有支持，日常使用最多，面试最经常问到的是GO语言中的Map和Redis中的字典。 这是GO语言官方文档的描述： Maps...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/go%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/Map.html"}],["meta",{"property":"og:site_name","content":"ik楠の空间"}],["meta",{"property":"og:title","content":"Map"}],["meta",{"property":"og:description","content":"Map 本文为极客时间《Go语言核心36讲》的学习笔记，梳理了相关的知识点。 Map的简介 Map数据结构有多种多样的名称：哈希表，散列，字典，Map，键值对，这些都是广义上的Map数据类型。Map类型的数据结构在大多数的编程语言中都有支持，日常使用最多，面试最经常问到的是GO语言中的Map和Redis中的字典。 这是GO语言官方文档的描述： Maps..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/golang/map1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-19T11:48:56.000Z"}],["meta",{"property":"article:author","content":"极客时间"}],["meta",{"property":"article:tag","content":"Map"}],["meta",{"property":"article:tag","content":"哈希冲突"}],["meta",{"property":"article:tag","content":"笔记"}],["meta",{"property":"article:tag","content":"go"}],["meta",{"property":"article:published_time","content":"2023-11-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-19T11:48:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Map\\",\\"image\\":[\\"https://mister-hope.github.io/golang/map1.png\\"],\\"datePublished\\":\\"2023-11-30T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-19T11:48:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"极客时间\\"}]}"]]},"headers":[{"level":2,"title":"Map的简介","slug":"map的简介","link":"#map的简介","children":[]},{"level":2,"title":"原理","slug":"原理","link":"#原理","children":[{"level":3,"title":"哈希函数","slug":"哈希函数","link":"#哈希函数","children":[]},{"level":3,"title":"冲突解决","slug":"冲突解决","link":"#冲突解决","children":[]}]},{"level":2,"title":"使用技巧","slug":"使用技巧","link":"#使用技巧","children":[{"level":3,"title":"键值对","slug":"键值对","link":"#键值对","children":[]},{"level":3,"title":"常用操作","slug":"常用操作","link":"#常用操作","children":[]}]},{"level":2,"title":"Map的底层设计","slug":"map的底层设计","link":"#map的底层设计","children":[]},{"level":2,"title":"问题引申","slug":"问题引申","link":"#问题引申","children":[{"level":3,"title":"如何安全的使用Map?","slug":"如何安全的使用map","link":"#如何安全的使用map","children":[]},{"level":3,"title":"应该优先考虑哪些类型作为字典的键类型？","slug":"应该优先考虑哪些类型作为字典的键类型","link":"#应该优先考虑哪些类型作为字典的键类型","children":[]},{"level":3,"title":"Go语言中的Map如何扩容？","slug":"go语言中的map如何扩容","link":"#go语言中的map如何扩容","children":[]},{"level":3,"title":"使用struct作为Map的Key时，有哪些注意事项","slug":"使用struct作为map的key时-有哪些注意事项","link":"#使用struct作为map的key时-有哪些注意事项","children":[]}]}],"git":{"createdTime":1721389736000,"updatedTime":1721389736000,"contributors":[{"name":"iknan","email":"149158995+iknan@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":9.1,"words":2730},"filePathRelative":"posts/go相关笔记/Map.md","localizedDate":"2023年11月30日","excerpt":"\\n<blockquote>\\n<p>本文为极客时间《Go语言核心36讲》的学习笔记，梳理了相关的知识点。</p>\\n</blockquote>\\n<p><a name=\\"83fbca9d\\"></a></p>\\n<h2>Map的简介</h2>\\n<p>Map数据结构有多种多样的名称：<strong>哈希表，散列，字典，Map，键值对</strong>，这些都是广义上的Map数据类型。Map类型的数据结构在大多数的编程语言中都有支持，日常使用最多，面试最经常问到的是<strong>GO语言中的Map</strong>和<strong>Redis中的字典</strong>。</p>\\n<p>这是GO语言官方文档的描述：</p>","autoDesc":true}')}}]);