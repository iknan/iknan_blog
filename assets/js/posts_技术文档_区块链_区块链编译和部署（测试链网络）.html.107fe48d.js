"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[5986],{2991:(s,i)=>{i.A=(s,i)=>{const a=s.__vccOpts||s;for(const[s,n]of i)a[s]=n;return a}},6953:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>t,data:()=>p});var n=a(2360);const e=[(0,n.Fv)('<h1 id="区块链编译和部署-测试链网络" tabindex="-1"><a class="header-anchor" href="#区块链编译和部署-测试链网络"><span>区块链编译和部署（测试链网络）</span></a></h1><p><strong>1.这里推荐以太坊的holesky测试网和polygon的amoy测试网</strong></p><p>下面就以以太坊的holesky为例</p><h2 id="_1-安装必备插件" tabindex="-1"><a class="header-anchor" href="#_1-安装必备插件"><span>1.安装必备插件</span></a></h2><ol><li><p>在浏览器（尽量使用谷歌浏览器）的扩展程序中搜索MetaMask（钱包），并注册账户，你会有一个钱包地址和助记词（私钥）</p></li><li><p>truffle下载</p></li></ol><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> truffle</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">truffle</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> version</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-在metamask中添加测试网络" tabindex="-1"><a class="header-anchor" href="#_2-在metamask中添加测试网络"><span>2.在MetaMask中添加测试网络</span></a></h2><p>左上角选择网络，点添加网络或者自定义网络</p><p>按照以下进行填写</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>//网络名称：Holesky Test Network //这个可以自己定义</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>//新的 RPC URL：https://rpc.holesky.ethpandaops.io/</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>//链 ID ： 17000</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>//区块浏览器 URL：https://holesky.etherscan.io/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加完之后保存即可，切换到刚刚添加的网络</p><p><a href="https://cloud.google.com/application/web3/faucet/ethereum/holesky" target="_blank" rel="noopener noreferrer">https://cloud.google.com/application/web3/faucet/ethereum/holesky</a></p><p>进入上面的网站领取测试币，每天可以领取一次，不过没必要</p><h2 id="_3-找一个合适的区块链平台" tabindex="-1"><a class="header-anchor" href="#_3-找一个合适的区块链平台"><span>3.找一个合适的区块链平台</span></a></h2><h3 id="_1-推荐使用alchemy-infura-chainstack和quicknode" tabindex="-1"><a class="header-anchor" href="#_1-推荐使用alchemy-infura-chainstack和quicknode"><span>1.推荐使用alchemy，infura，chainstack和QuickNode</span></a></h3><p>登录之后在平台中创建自己的项目</p><figure><img src="/blockchain/5.png" alt="image-20240726141352734" tabindex="0" loading="lazy"><figcaption>image-20240726141352734</figcaption></figure><p>选择自己的网络，网址后面是自己的密钥，直接复制即可</p><p><code>https://eth-holesky.g.alchemy.com/v2/your_API密钥</code></p><h3 id="_2-然后在truffle项目中进行配置" tabindex="-1"><a class="header-anchor" href="#_2-然后在truffle项目中进行配置"><span>2.然后在truffle项目中进行配置</span></a></h3><ol><li>需要先在truffle项目的目录下下载hdwallet-provider包</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>npm init -y</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>npm install @truffle/hdwallet-provider</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>配置truffle-config.js</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>// truffle-config.js</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>const HDWalletProvider = require(&#39;@truffle/hdwallet-provider&#39;);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>const mnemonic = &quot;这里填写钱包的助记词&quot;;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>module.exports = {</span></span>\n<span class="line"><span>  networks: {</span></span>\n<span class="line"><span>    holesky: {</span></span>\n<span class="line"><span>      provider: () =&gt; new HDWalletProvider(</span></span>\n<span class="line"><span>        mnemonic,</span></span>\n<span class="line"><span>        `https://eth-holesky.g.alchemy.com/v2/your_API密钥`</span></span>\n<span class="line"><span>      ),</span></span>\n<span class="line"><span>      network_id: &quot;*&quot;,  // holesky的链Id是17000，设置*表示适配所有的链</span></span>\n<span class="line"><span>      confirmations: 2,</span></span>\n<span class="line"><span>      timeoutBlocks: 200,</span></span>\n<span class="line"><span>      skipDryRun: true,</span></span>\n<span class="line"><span>      timeoutBlocks: 200,  // 等待区块确认的超时时间</span></span>\n<span class="line"><span>      networkCheckTimeout: 1000000000,  // 网络检查的超时时间</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>  },</span></span>\n<span class="line"><span>  compilers: {</span></span>\n<span class="line"><span>    solc: {</span></span>\n<span class="line"><span>      version: &quot;0.8.20&quot;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>  }</span></span>\n<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><p>智能合约（举例）</p><p>/contracts 这个是存智能合约的目录</p><p><strong>合约的命名以.sol结尾即可，前面可根据自身情况来定义，迁移文件只认编译生成的文件名</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>// SPDX-License-Identifier: MIT</span></span>\n<span class="line"><span>pragma solidity ^0.8.0;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>import &quot;@openzeppelin/contracts/token/ERC20/ERC20.sol&quot;;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>// MintToken 就是编译后生成的json文件的文件名</span></span>\n<span class="line"><span>contract MintToken is ERC20 {</span></span>\n<span class="line"><span>    address public minter;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    event MinterChanged(address indexed from, address to);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    constructor() ERC20(&quot;AToken&quot;, &quot;ATK&quot;) {</span></span>\n<span class="line"><span>        minter = msg.sender;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    function mintTokens(address to, uint256 amount) external {</span></span>\n<span class="line"><span>        require(msg.sender == minter, &quot;Only minter can mint tokens&quot;);</span></span>\n<span class="line"><span>        _mint(to, amount);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    function changeMinter(address newMinter) external {</span></span>\n<span class="line"><span>        require(msg.sender == minter, &quot;Only current minter can change minter&quot;);</span></span>\n<span class="line"><span>        emit MinterChanged(minter, newMinter);</span></span>\n<span class="line"><span>        minter = newMinter;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>编辑迁移文件</p></li></ol><p>迁移文件在 /migrations 中创建，命名规则是必须以数字开头，我这里命名为2_deploy_mint.js</p><blockquote><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//2_deploy_mint.js</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> MintToken</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> artifacts</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;MintToken&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 上面的这个MintToken是编译后生成的文件名，也是上一步智能合约中contract MintToken is ERC20中的 MintToken，需要把下面的也改成这个</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> async</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">deployer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 设置重试次数和延迟时间</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> maxRetries</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> delay</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 15000</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 部署 BToken 合约</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> attempt</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">attempt</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> maxRetries</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">attempt</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">            console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">`Attempt </span><span style="--shiki-light:#032F62;--shiki-dark:#C678DD;">${</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">attempt</span><span style="--shiki-light:#032F62;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> to deploy MintToken`</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            await</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> deployer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">deploy</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">MintToken</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//这个必须要跟上面一致</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">            console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">`Successfully deployed MintToken on attempt </span><span style="--shiki-light:#032F62;--shiki-dark:#C678DD;">${</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">attempt</span><span style="--shiki-light:#032F62;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">`</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            break</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 如果部署成功，跳出循环</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">            console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">`Attempt </span><span style="--shiki-light:#032F62;--shiki-dark:#C678DD;">${</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">attempt</span><span style="--shiki-light:#032F62;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> failed: </span><span style="--shiki-light:#032F62;--shiki-dark:#C678DD;">${</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">error</span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">message</span><span style="--shiki-light:#032F62;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">`</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">attempt</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> maxRetries</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">                console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">`Waiting for </span><span style="--shiki-light:#032F62;--shiki-dark:#C678DD;">${</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">delay</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1000</span><span style="--shiki-light:#032F62;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> seconds before retrying...`</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">                await</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">resolve</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">delay</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">));</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">                console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;Max retries reached. Deployment failed.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">                throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> error</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 达到最大重试次数后抛出错误</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p>完成上面的操作后，在truffle项目目录下的命令行中输入</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">truffle</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> compile</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">                     //编译生成build目录和json文件</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">truffle</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> migrate</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --network</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> holesky</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">   //</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  编译并部署到区块链网络上</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="/blockchain/6.png" alt="image-20240726144221094" tabindex="0" loading="lazy"><figcaption>image-20240726144221094</figcaption></figure><p>出现contract address才算成功</p><h2 id="_4-在代码中具体实现-以go为例" tabindex="-1"><a class="header-anchor" href="#_4-在代码中具体实现-以go为例"><span>4.在代码中具体实现（以go为例）</span></a></h2><p>生成的json文件中会有一个abi文件，在/build中找到与自己合约同名的json文件</p><figure><img src="/blockchain/7.png" alt="image-20240726144619989" tabindex="0" loading="lazy"><figcaption>image-20240726144619989</figcaption></figure><p>复制到自己的代码项目库中</p><figure><img src="/blockchain/8.png" alt="image-20240726144811213" tabindex="0" loading="lazy"><figcaption>image-20240726144811213</figcaption></figure><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> // 读取合约ABI</span></span>\n<span class="line"><span> abiData, err := ioutil.ReadFile(&quot;utils/solidity/MintToken.abi&quot;)</span></span>\n<span class="line"><span> if err != nil {</span></span>\n<span class="line"><span>  return fmt.Errorf(&quot;failed to read ABI file: %w&quot;, err)</span></span>\n<span class="line"><span> }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span> // 解析ABI</span></span>\n<span class="line"><span> parsedABI, err := abi.JSON(bytes.NewReader(abiData))</span></span>\n<span class="line"><span> if err != nil {</span></span>\n<span class="line"><span>  return fmt.Errorf(&quot;failed to parse ABI: %w&quot;, err)</span></span>\n<span class="line"><span> }w</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>```f</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>通过上面的命令解析abi中的函数，后续可以直接调用函数</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',37)],l={},t=(0,a(2991).A)(l,[["render",function(s,i){return(0,n.uX)(),(0,n.CE)("div",null,e)}]]),p=JSON.parse('{"path":"/posts/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/%E5%8C%BA%E5%9D%97%E9%93%BE/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%BC%96%E8%AF%91%E5%92%8C%E9%83%A8%E7%BD%B2%EF%BC%88%E6%B5%8B%E8%AF%95%E9%93%BE%E7%BD%91%E7%BB%9C%EF%BC%89.html","title":"区块链编译和部署（测试链网络）","lang":"zh-CN","frontmatter":{"icon":"eos-icons:blockchain","date":"2023-09-30T00:00:00.000Z","category":["区块链","后端","技术文档","指南"],"tag":["区块链","后端","技术文档","指南","测试网"],"star":true,"stick":1,"description":"区块链编译和部署（测试链网络） 1.这里推荐以太坊的holesky测试网和polygon的amoy测试网 下面就以以太坊的holesky为例 1.安装必备插件 在浏览器（尽量使用谷歌浏览器）的扩展程序中搜索MetaMask（钱包），并注册账户，你会有一个钱包地址和助记词（私钥） truffle下载 2.在MetaMask中添加测试网络 左上角选择网络，...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/%E5%8C%BA%E5%9D%97%E9%93%BE/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%BC%96%E8%AF%91%E5%92%8C%E9%83%A8%E7%BD%B2%EF%BC%88%E6%B5%8B%E8%AF%95%E9%93%BE%E7%BD%91%E7%BB%9C%EF%BC%89.html"}],["meta",{"property":"og:site_name","content":"ik楠の空间"}],["meta",{"property":"og:title","content":"区块链编译和部署（测试链网络）"}],["meta",{"property":"og:description","content":"区块链编译和部署（测试链网络） 1.这里推荐以太坊的holesky测试网和polygon的amoy测试网 下面就以以太坊的holesky为例 1.安装必备插件 在浏览器（尽量使用谷歌浏览器）的扩展程序中搜索MetaMask（钱包），并注册账户，你会有一个钱包地址和助记词（私钥） truffle下载 2.在MetaMask中添加测试网络 左上角选择网络，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/blockchain/5.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-26T07:23:47.000Z"}],["meta",{"property":"article:author","content":"iknan"}],["meta",{"property":"article:tag","content":"区块链"}],["meta",{"property":"article:tag","content":"后端"}],["meta",{"property":"article:tag","content":"技术文档"}],["meta",{"property":"article:tag","content":"指南"}],["meta",{"property":"article:tag","content":"测试网"}],["meta",{"property":"article:published_time","content":"2023-09-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-26T07:23:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"区块链编译和部署（测试链网络）\\",\\"image\\":[\\"https://mister-hope.github.io/blockchain/5.png\\",\\"https://mister-hope.github.io/blockchain/6.png\\",\\"https://mister-hope.github.io/blockchain/7.png\\",\\"https://mister-hope.github.io/blockchain/8.png\\"],\\"datePublished\\":\\"2023-09-30T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-26T07:23:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"iknan\\",\\"url\\":\\"https://iknan.love\\"}]}"]]},"headers":[{"level":2,"title":"1.安装必备插件","slug":"_1-安装必备插件","link":"#_1-安装必备插件","children":[]},{"level":2,"title":"2.在MetaMask中添加测试网络","slug":"_2-在metamask中添加测试网络","link":"#_2-在metamask中添加测试网络","children":[]},{"level":2,"title":"3.找一个合适的区块链平台","slug":"_3-找一个合适的区块链平台","link":"#_3-找一个合适的区块链平台","children":[{"level":3,"title":"1.推荐使用alchemy，infura，chainstack和QuickNode","slug":"_1-推荐使用alchemy-infura-chainstack和quicknode","link":"#_1-推荐使用alchemy-infura-chainstack和quicknode","children":[]},{"level":3,"title":"2.然后在truffle项目中进行配置","slug":"_2-然后在truffle项目中进行配置","link":"#_2-然后在truffle项目中进行配置","children":[]}]},{"level":2,"title":"4.在代码中具体实现（以go为例）","slug":"_4-在代码中具体实现-以go为例","link":"#_4-在代码中具体实现-以go为例","children":[]}],"git":{"createdTime":1721978435000,"updatedTime":1721978627000,"contributors":[{"name":"iknan","email":"149158995+iknan@users.noreply.github.com","commits":2}]},"readingTime":{"minutes":3.35,"words":1006},"filePathRelative":"posts/技术文档/区块链/区块链编译和部署（测试链网络）.md","localizedDate":"2023年9月30日","excerpt":"\\n<p><strong>1.这里推荐以太坊的holesky测试网和polygon的amoy测试网</strong></p>\\n<p>下面就以以太坊的holesky为例</p>\\n<h2>1.安装必备插件</h2>\\n<ol>\\n<li>\\n<p>在浏览器（尽量使用谷歌浏览器）的扩展程序中搜索MetaMask（钱包），并注册账户，你会有一个钱包地址和助记词（私钥）</p>\\n</li>\\n<li>\\n<p>truffle下载</p>\\n</li>\\n</ol>\\n<div class=\\"language-shell line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"shell\\" data-title=\\"shell\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">npm</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> install</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\"> -g</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> truffle</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">truffle</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> version</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);